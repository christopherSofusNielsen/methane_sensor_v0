
methane_sensor_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000458  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800100  00800100  00000458  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000004b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cfe  00000000  00000000  000005ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cac  00000000  00000000  000022a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007fb  00000000  00000000  00002f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002ec  00000000  00000000  00003750  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036c  00000000  00000000  00003a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a4f  00000000  00000000  00003da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000047f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000003c0  000003c0  00000454  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000048b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.uart0_hal_init 0000003c  0000029c  0000029c  00000330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.uart0_hal_send_message 00000034  000002d8  000002d8  0000036c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_20 0000004a  0000020c  0000020c  000002a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_18 00000070  0000019c  0000019c  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.rx_buffer_has_message 00000001  0080022c  0080022c  00000458  2**0
                  ALLOC
 19 .bss.rx_buffer_data_len 00000001  0080022d  0080022d  00000458  2**0
                  ALLOC
 20 .bss.tx_buffer_cursor 00000001  0080022e  0080022e  00000458  2**0
                  ALLOC
 21 .bss.tx_buffer_data_len 00000001  0080022f  0080022f  00000458  2**0
                  ALLOC
 22 .text.main    00000006  000003ba  000003ba  0000044e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 0000007f  0000010e  0000010e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.cmd_with_ending 00000032  0000030c  0000030c  000003a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000e  0000018d  0000018d  00000221  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.test_lora_module_start 00000046  00000256  00000256  000002ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.avrlibc 00000032  0000033e  0000033e  000003d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.avrlibc 0000002c  00000370  00000370  00000404  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.avrlibc 0000001e  0000039c  0000039c  00000430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
   8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
   c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  14:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  24:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  28:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  2c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  40:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_18>
  4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  50:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_20>
  54:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  68:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  6c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  70:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  78:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  7c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  80:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  84:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  88:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  8c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  90:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  94:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  98:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  9c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  a0:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  a4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  a8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  ac:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
  b0:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>

000000b4 <.dinit>:
  b4:	01 00       	.word	0x0001	; ????
  b6:	02 30       	cpi	r16, 0x02	; 2
  b8:	80 00       	.word	0x0080	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	e4 eb       	ldi	r30, 0xB4	; 180
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	17 c0       	rjmp	.+46     	; 0xfc <__do_clear_bss+0x8>
  ce:	b5 91       	lpm	r27, Z+
  d0:	a5 91       	lpm	r26, Z+
  d2:	35 91       	lpm	r19, Z+
  d4:	25 91       	lpm	r18, Z+
  d6:	05 91       	lpm	r16, Z+
  d8:	07 fd       	sbrc	r16, 7
  da:	0c c0       	rjmp	.+24     	; 0xf4 <__do_clear_bss>
  dc:	95 91       	lpm	r25, Z+
  de:	85 91       	lpm	r24, Z+
  e0:	ef 01       	movw	r28, r30
  e2:	f9 2f       	mov	r31, r25
  e4:	e8 2f       	mov	r30, r24
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0x20>
  f0:	fe 01       	movw	r30, r28
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_clear_bss+0x8>

000000f4 <__do_clear_bss>:
  f4:	1d 92       	st	X+, r1
  f6:	a2 17       	cp	r26, r18
  f8:	b3 07       	cpc	r27, r19
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__do_clear_bss>
  fc:	e9 3b       	cpi	r30, 0xB9	; 185
  fe:	f4 07       	cpc	r31, r20
 100:	31 f7       	brne	.-52     	; 0xce <__do_copy_data+0x8>
 102:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
 106:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>

Disassembly of section .text:

000003c0 <__bad_interrupt>:
 3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.uart0_hal_init:

0000029c <uart0_hal_init>:
uint8_t rx_buffer[UART0_RX_BUFF_LENGTH];
uint8_t rx_buffer_data_len=0;
uint8_t rx_buffer_has_message=0;

void uart0_hal_init(){
	set_bit(UCSR0B, 4); //Enable Rx
 29c:	e1 ec       	ldi	r30, 0xC1	; 193
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	80 61       	ori	r24, 0x10	; 16
 2a4:	80 83       	st	Z, r24
	set_bit(UCSR0B, 3); //Enable Tx
 2a6:	80 81       	ld	r24, Z
 2a8:	88 60       	ori	r24, 0x08	; 8
 2aa:	80 83       	st	Z, r24
	set_bit(UCSR0B, 7); //interrupt Rx complete
 2ac:	80 81       	ld	r24, Z
 2ae:	80 68       	ori	r24, 0x80	; 128
 2b0:	80 83       	st	Z, r24
	set_bit(UCSR0B, 6); //interrupt Tx complete
 2b2:	80 81       	ld	r24, Z
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	80 83       	st	Z, r24
	set_bit(UCSR0A, 1); //Set double speed
 2b8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	82 60       	ori	r24, 0x02	; 2
 2c0:	80 83       	st	Z, r24
	UCSR0C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0=(8000000/(8*57600))-1; //set baudrate
 2c8:	80 e1       	ldi	r24, 0x10	; 16
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	sei();
 2d4:	78 94       	sei
 2d6:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000002d8 <uart0_hal_send_message>:
}


void uart0_hal_send_message(uint8_t msg[], uint8_t length){
 2d8:	dc 01       	movw	r26, r24
	for (uint8_t i=0; i<length; i++)
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <uart0_hal_send_message+0x1c>
	{
		tx_buffer[i]=msg[i];
 2de:	29 2f       	mov	r18, r25
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	fd 01       	movw	r30, r26
 2e4:	e2 0f       	add	r30, r18
 2e6:	f3 1f       	adc	r31, r19
 2e8:	40 81       	ld	r20, Z
 2ea:	f9 01       	movw	r30, r18
 2ec:	ec 59       	subi	r30, 0x9C	; 156
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
 2f0:	40 83       	st	Z, r20
	sei();
}


void uart0_hal_send_message(uint8_t msg[], uint8_t length){
	for (uint8_t i=0; i<length; i++)
 2f2:	9f 5f       	subi	r25, 0xFF	; 255
 2f4:	96 17       	cp	r25, r22
 2f6:	98 f3       	brcs	.-26     	; 0x2de <uart0_hal_send_message+0x6>
	{
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
 2f8:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <tx_buffer_data_len>
	tx_buffer_cursor=1;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <tx_buffer_cursor>
	UDR0=tx_buffer[0];
 302:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
 306:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 30a:	08 95       	ret

Disassembly of section .text.__vector_20:

0000020c <__vector_20>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART0_TX_vect){
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	8f 93       	push	r24
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 21c:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <tx_buffer_cursor>
 220:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <tx_buffer_data_len>
 224:	e8 17       	cp	r30, r24
 226:	58 f4       	brcc	.+22     	; 0x23e <__vector_20+0x32>
		UDR0=tx_buffer[tx_buffer_cursor++];
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	8e 0f       	add	r24, r30
 22c:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <tx_buffer_cursor>
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	ec 59       	subi	r30, 0x9C	; 156
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	80 81       	ld	r24, Z
 238:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 23c:	04 c0       	rjmp	.+8      	; 0x246 <__vector_20+0x3a>
	}else{
		tx_buffer_cursor=0;
 23e:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <tx_buffer_cursor>
		tx_buffer_data_len=0;
 242:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <tx_buffer_data_len>
	}
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	8f 91       	pop	r24
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

Disassembly of section .text.__vector_18:

0000019c <__vector_18>:
	{
		msg[i]=rx_buffer[i];
	}
	uart0_hal_clear_rx_buffer();
	return rx_buffer_data_len-2;
}
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
 1b0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <_end>
 1b4:	81 11       	cpse	r24, r1
 1b6:	0e c0       	rjmp	.+28     	; 0x1d4 <__vector_18+0x38>
 1b8:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <rx_buffer_data_len>
 1bc:	e4 36       	cpi	r30, 0x64	; 100
 1be:	50 f4       	brcc	.+20     	; 0x1d4 <__vector_18+0x38>
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	8e 0f       	add	r24, r30
 1c4:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <rx_buffer_data_len>
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1ce:	e0 50       	subi	r30, 0x00	; 0
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	80 83       	st	Z, r24
 1d4:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <rx_buffer_data_len>
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	e1 50       	subi	r30, 0x01	; 1
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	20 81       	ld	r18, Z
 1e2:	2d 30       	cpi	r18, 0x0D	; 13
 1e4:	49 f4       	brne	.+18     	; 0x1f8 <__vector_18+0x5c>
 1e6:	fc 01       	movw	r30, r24
 1e8:	e2 50       	subi	r30, 0x02	; 2
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	80 81       	ld	r24, Z
 1ee:	8a 30       	cpi	r24, 0x0A	; 10
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <__vector_18+0x5c>
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <_end>
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

Disassembly of section .text.main:

000003ba <main>:
#include "TEST/lora-module/test_lora_module.h"


int main(void)
{
	test_lora_module_start();
 3ba:	0e 94 2b 01 	call	0x256	; 0x256 <test_lora_module_start>
 3be:	ff cf       	rjmp	.-2      	; 0x3be <main+0x4>

Disassembly of section .text.cmd_with_ending:

0000030c <cmd_with_ending>:
void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
 312:	0e 94 ce 01 	call	0x39c	; 0x39c <strcpy>
	strcat(buffer, CMD_END_CHARS);
 316:	fe 01       	movw	r30, r28
 318:	01 90       	ld	r0, Z+
 31a:	00 20       	and	r0, r0
 31c:	e9 f7       	brne	.-6      	; 0x318 <cmd_with_ending+0xc>
 31e:	cf 01       	movw	r24, r30
 320:	23 e0       	ldi	r18, 0x03	; 3
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	43 e1       	ldi	r20, 0x13	; 19
 326:	51 e0       	ldi	r21, 0x01	; 1
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	0e 94 9f 01 	call	0x33e	; 0x33e <memcpy>
	return strlen(buffer);
 330:	be 01       	movw	r22, r28
 332:	80 e8       	ldi	r24, 0x80	; 128
 334:	0e 94 b8 01 	call	0x370	; 0x370 <strlen>
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

Disassembly of section .text.test_lora_module_start:

00000256 <test_lora_module_start>:
#include "../../HAL/UART0/UART0_HAL.h"
#include <util/delay.h>
#include "../../MODULES/lora_module/lora_module.h"
#include "../../MODULES/lora_module/RN2483_protocol/RN2483_protocol.h"

void test_lora_module_start(){
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	c8 5c       	subi	r28, 0xC8	; 200
 260:	d1 09       	sbc	r29, r1
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
	
	uart0_hal_init();
 26c:	0e 94 4e 01 	call	0x29c	; 0x29c <uart0_hal_init>
	
	while(1){
		const char msg[200];
		int16_t len=cmd_with_ending(msg, SYS_GET_HW_EUI_CMD);
 270:	4d e8       	ldi	r20, 0x8D	; 141
 272:	51 e0       	ldi	r21, 0x01	; 1
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	ce 01       	movw	r24, r28
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	0e 94 86 01 	call	0x30c	; 0x30c <cmd_with_ending>
		
		uart0_hal_send_message((uint8_t *) msg, len);
 27e:	68 2f       	mov	r22, r24
 280:	ce 01       	movw	r24, r28
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <uart0_hal_send_message>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	89 e6       	ldi	r24, 0x69	; 105
 28c:	98 e1       	ldi	r25, 0x18	; 24
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <test_lora_module_start+0x38>
 296:	00 c0       	rjmp	.+0      	; 0x298 <test_lora_module_start+0x42>
 298:	00 00       	nop
 29a:	ea cf       	rjmp	.-44     	; 0x270 <test_lora_module_start+0x1a>

Disassembly of section .text.avrlibc:

0000033e <memcpy>:
 33e:	cf 92       	push	r12
 340:	df 92       	push	r13
 342:	ef 92       	push	r14
 344:	dc 01       	movw	r26, r24
 346:	6a 01       	movw	r12, r20
 348:	e6 2e       	mov	r14, r22
 34a:	28 0f       	add	r18, r24
 34c:	39 1f       	adc	r19, r25
 34e:	a2 17       	cp	r26, r18
 350:	b3 07       	cpc	r27, r19
 352:	51 f0       	breq	.+20     	; 0x368 <memcpy+0x2a>
 354:	f6 01       	movw	r30, r12
 356:	44 91       	lpm	r20, Z
 358:	e7 fc       	sbrc	r14, 7
 35a:	40 81       	ld	r20, Z
 35c:	4d 93       	st	X+, r20
 35e:	4f ef       	ldi	r20, 0xFF	; 255
 360:	c4 1a       	sub	r12, r20
 362:	d4 0a       	sbc	r13, r20
 364:	e4 0a       	sbc	r14, r20
 366:	f3 cf       	rjmp	.-26     	; 0x34e <memcpy+0x10>
 368:	ef 90       	pop	r14
 36a:	df 90       	pop	r13
 36c:	cf 90       	pop	r12
 36e:	08 95       	ret

Disassembly of section .text.avrlibc:

00000370 <strlen>:
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	6b 01       	movw	r12, r22
 378:	e8 2e       	mov	r14, r24
 37a:	a8 2f       	mov	r26, r24
 37c:	cb 01       	movw	r24, r22
 37e:	fc 01       	movw	r30, r24
 380:	24 91       	lpm	r18, Z
 382:	a7 fd       	sbrc	r26, 7
 384:	20 81       	ld	r18, Z
 386:	22 23       	and	r18, r18
 388:	19 f0       	breq	.+6      	; 0x390 <strlen+0x20>
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	a1 1d       	adc	r26, r1
 38e:	f7 cf       	rjmp	.-18     	; 0x37e <strlen+0xe>
 390:	8c 19       	sub	r24, r12
 392:	9d 09       	sbc	r25, r13
 394:	ef 90       	pop	r14
 396:	df 90       	pop	r13
 398:	cf 90       	pop	r12
 39a:	08 95       	ret

Disassembly of section .text.avrlibc:

0000039c <strcpy>:
 39c:	9a 01       	movw	r18, r20
 39e:	46 2f       	mov	r20, r22
 3a0:	dc 01       	movw	r26, r24
 3a2:	f9 01       	movw	r30, r18
 3a4:	54 91       	lpm	r21, Z
 3a6:	47 fd       	sbrc	r20, 7
 3a8:	50 81       	ld	r21, Z
 3aa:	5d 93       	st	X+, r21
 3ac:	55 23       	and	r21, r21
 3ae:	21 f0       	breq	.+8      	; 0x3b8 <strcpy+0x1c>
 3b0:	2f 5f       	subi	r18, 0xFF	; 255
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
 3b4:	4f 4f       	sbci	r20, 0xFF	; 255
 3b6:	f5 cf       	rjmp	.-22     	; 0x3a2 <strcpy+0x6>
 3b8:	08 95       	ret
