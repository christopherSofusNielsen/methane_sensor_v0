
methane_sensor_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000526  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800100  00800100  00000526  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000581  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001eff  00000000  00000000  000006a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d7a  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000955  00000000  00000000  00003322  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a4  00000000  00000000  00003c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000368  00000000  00000000  00003f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e5  00000000  00000000  00004284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00004869  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004ae  000004ae  00000522  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004944  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.PM_HAL_enter_power_down 00000042  0000039c  0000039c  00000410  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 00000014  00000494  00000494  00000508  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.uart0_hal_init 0000003c  000003de  000003de  00000452  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.uart0_hal_send_message 00000034  0000041a  0000041a  0000048e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_20 0000004a  00000308  00000308  0000037c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_18 00000074  000001d2  000001d2  00000246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.rx_buffer_has_message 00000001  00800358  00800358  00000526  2**0
                  ALLOC
 21 .bss.rx_buffer_data_len 00000001  00800359  00800359  00000526  2**0
                  ALLOC
 22 .bss.tx_buffer_cursor 00000001  0080035a  0080035a  00000526  2**0
                  ALLOC
 23 .bss.tx_buffer_data_len 00000001  0080035b  0080035b  00000526  2**0
                  ALLOC
 24 .text.__vector_30 0000004a  00000352  00000352  000003c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_28 00000070  00000246  00000246  000002ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.rx_buffer_has_message 00000001  0080035c  0080035c  00000526  2**0
                  ALLOC
 27 .bss.rx_buffer_data_len 00000001  0080035d  0080035d  00000526  2**0
                  ALLOC
 28 .bss.rx_buffer 00000064  008002f4  008002f4  00000526  2**0
                  ALLOC
 29 .bss.tx_buffer_cursor 00000001  0080035e  0080035e  00000526  2**0
                  ALLOC
 30 .bss.tx_buffer_data_len 00000001  0080035f  0080035f  00000526  2**0
                  ALLOC
 31 .bss.tx_buffer 000000c8  0080022c  0080022c  00000526  2**0
                  ALLOC
 32 .text.main    00000006  000004a8  000004a8  0000051c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data 0000001e  0000010e  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .text.test_sleep_cmd 000000a6  0000012c  0000012c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.test_PM_HAL_start 00000052  000002b6  000002b6  0000032a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.libgcc  0000001a  0000047a  0000047a  000004ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc 0000002c  0000044e  0000044e  000004c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_1>
   8:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
   c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  10:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  14:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  18:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  1c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  20:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  24:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  28:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  2c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  30:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  34:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  38:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  3c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  40:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  44:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_18>
  4c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  50:	0c 94 84 01 	jmp	0x308	; 0x308 <__vector_20>
  54:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  58:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  5c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  60:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  64:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  68:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  6c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  70:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_28>
  74:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  78:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_30>
  7c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  80:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  84:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  88:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  8c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  90:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  94:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  98:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  9c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  a0:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  a4:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  a8:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  ac:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>
  b0:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__bad_interrupt>

000000b4 <.dinit>:
  b4:	01 00       	.word	0x0001	; ????
  b6:	03 60       	ori	r16, 0x03	; 3
  b8:	80 00       	.word	0x0080	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	e4 eb       	ldi	r30, 0xB4	; 180
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	17 c0       	rjmp	.+46     	; 0xfc <__do_clear_bss+0x8>
  ce:	b5 91       	lpm	r27, Z+
  d0:	a5 91       	lpm	r26, Z+
  d2:	35 91       	lpm	r19, Z+
  d4:	25 91       	lpm	r18, Z+
  d6:	05 91       	lpm	r16, Z+
  d8:	07 fd       	sbrc	r16, 7
  da:	0c c0       	rjmp	.+24     	; 0xf4 <__do_clear_bss>
  dc:	95 91       	lpm	r25, Z+
  de:	85 91       	lpm	r24, Z+
  e0:	ef 01       	movw	r28, r30
  e2:	f9 2f       	mov	r31, r25
  e4:	e8 2f       	mov	r30, r24
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0x20>
  f0:	fe 01       	movw	r30, r28
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_clear_bss+0x8>

000000f4 <__do_clear_bss>:
  f4:	1d 92       	st	X+, r1
  f6:	a2 17       	cp	r26, r18
  f8:	b3 07       	cpc	r27, r19
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__do_clear_bss>
  fc:	e9 3b       	cpi	r30, 0xB9	; 185
  fe:	f4 07       	cpc	r31, r20
 100:	31 f7       	brne	.-52     	; 0xce <__do_copy_data+0x8>
 102:	0e 94 54 02 	call	0x4a8	; 0x4a8 <main>
 106:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>

Disassembly of section .text:

000004ae <__bad_interrupt>:
 4ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_enter_power_down:

0000039c <PM_HAL_enter_power_down>:
#include <avr/interrupt.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_enter_power_down(){
	clear_bit(DDRD, 2); //set PD2 as input
 39c:	8a b1       	in	r24, 0x0a	; 10
 39e:	8b 7f       	andi	r24, 0xFB	; 251
 3a0:	8a b9       	out	0x0a, r24	; 10
	set_bit(PORTD, 2); //Enbale pull up
 3a2:	8b b1       	in	r24, 0x0b	; 11
 3a4:	84 60       	ori	r24, 0x04	; 4
 3a6:	8b b9       	out	0x0b, r24	; 11
	
	//Set faling edge interrupt
	clear_bit(EICRA, 0);
 3a8:	e9 e6       	ldi	r30, 0x69	; 105
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	8e 7f       	andi	r24, 0xFE	; 254
 3b0:	80 83       	st	Z, r24
	set_bit(EICRA, 1);
 3b2:	80 81       	ld	r24, Z
 3b4:	82 60       	ori	r24, 0x02	; 2
 3b6:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 0);
 3b8:	8d b3       	in	r24, 0x1d	; 29
 3ba:	81 60       	ori	r24, 0x01	; 1
 3bc:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 3be:	83 b7       	in	r24, 0x33	; 51
 3c0:	81 7f       	andi	r24, 0xF1	; 241
 3c2:	84 60       	ori	r24, 0x04	; 4
 3c4:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
 3c6:	83 b7       	in	r24, 0x33	; 51
 3c8:	81 60       	ori	r24, 0x01	; 1
 3ca:	83 bf       	out	0x33, r24	; 51
	sei();
 3cc:	78 94       	sei
	sleep_cpu();
 3ce:	88 95       	sleep
	sleep_disable();
 3d0:	83 b7       	in	r24, 0x33	; 51
 3d2:	8e 7f       	andi	r24, 0xFE	; 254
 3d4:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 0);
 3d6:	8d b3       	in	r24, 0x1d	; 29
 3d8:	8e 7f       	andi	r24, 0xFE	; 254
 3da:	8d bb       	out	0x1d, r24	; 29
 3dc:	08 95       	ret

Disassembly of section .text.__vector_1:

00000494 <__vector_1>:
}

ISR(INT0_vect){
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
	
}
 49e:	0f 90       	pop	r0
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	0f 90       	pop	r0
 4a4:	1f 90       	pop	r1
 4a6:	18 95       	reti

Disassembly of section .text.uart0_hal_init:

000003de <uart0_hal_init>:
uint8_t rx_buffer_has_message=0;

static void copy_buffer(uint8_t msg[]);

void uart0_hal_init(){
	set_bit(UCSR0B, 4); //Enable Rx
 3de:	e1 ec       	ldi	r30, 0xC1	; 193
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	80 61       	ori	r24, 0x10	; 16
 3e6:	80 83       	st	Z, r24
	set_bit(UCSR0B, 3); //Enable Tx
 3e8:	80 81       	ld	r24, Z
 3ea:	88 60       	ori	r24, 0x08	; 8
 3ec:	80 83       	st	Z, r24
	set_bit(UCSR0B, 7); //interrupt Rx complete
 3ee:	80 81       	ld	r24, Z
 3f0:	80 68       	ori	r24, 0x80	; 128
 3f2:	80 83       	st	Z, r24
	set_bit(UCSR0B, 6); //interrupt Tx complete
 3f4:	80 81       	ld	r24, Z
 3f6:	80 64       	ori	r24, 0x40	; 64
 3f8:	80 83       	st	Z, r24
	set_bit(UCSR0A, 1); //Set double speed
 3fa:	e0 ec       	ldi	r30, 0xC0	; 192
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	82 60       	ori	r24, 0x02	; 2
 402:	80 83       	st	Z, r24
	UCSR0C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0=(8000000/(8*57600))-1; //set baudrate
 40a:	80 e1       	ldi	r24, 0x10	; 16
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 412:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	sei();
 416:	78 94       	sei
 418:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

0000041a <uart0_hal_send_message>:
}


void uart0_hal_send_message(uint8_t msg[], uint8_t length){
 41a:	dc 01       	movw	r26, r24
	for (uint8_t i=0; i<length; i++)
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0b c0       	rjmp	.+22     	; 0x436 <uart0_hal_send_message+0x1c>
	{
		tx_buffer[i]=msg[i];
 420:	29 2f       	mov	r18, r25
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	fd 01       	movw	r30, r26
 426:	e2 0f       	add	r30, r18
 428:	f3 1f       	adc	r31, r19
 42a:	40 81       	ld	r20, Z
 42c:	f9 01       	movw	r30, r18
 42e:	ec 59       	subi	r30, 0x9C	; 156
 430:	fe 4f       	sbci	r31, 0xFE	; 254
 432:	40 83       	st	Z, r20
	sei();
}


void uart0_hal_send_message(uint8_t msg[], uint8_t length){
	for (uint8_t i=0; i<length; i++)
 434:	9f 5f       	subi	r25, 0xFF	; 255
 436:	96 17       	cp	r25, r22
 438:	98 f3       	brcs	.-26     	; 0x420 <uart0_hal_send_message+0x6>
	{
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
 43a:	60 93 5b 03 	sts	0x035B, r22	; 0x80035b <tx_buffer_data_len>
	tx_buffer_cursor=1;
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <tx_buffer_cursor>
	UDR0=tx_buffer[0];
 444:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
 448:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 44c:	08 95       	ret

Disassembly of section .text.__vector_20:

00000308 <__vector_20>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	8f 93       	push	r24
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
 318:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <tx_buffer_cursor>
 31c:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <tx_buffer_data_len>
 320:	e8 17       	cp	r30, r24
 322:	58 f4       	brcc	.+22     	; 0x33a <__vector_20+0x32>
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	8e 0f       	add	r24, r30
 328:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <tx_buffer_cursor>
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	ec 59       	subi	r30, 0x9C	; 156
 330:	fe 4f       	sbci	r31, 0xFE	; 254
 332:	80 81       	ld	r24, Z
 334:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 338:	04 c0       	rjmp	.+8      	; 0x342 <__vector_20+0x3a>
 33a:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <tx_buffer_cursor>
 33e:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <tx_buffer_data_len>
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	8f 91       	pop	r24
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

Disassembly of section .text.__vector_18:

000001d2 <__vector_18>:
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
 1e6:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <rx_buffer_has_message>
 1ea:	81 11       	cpse	r24, r1
 1ec:	0e c0       	rjmp	.+28     	; 0x20a <__vector_18+0x38>
 1ee:	e0 91 59 03 	lds	r30, 0x0359	; 0x800359 <rx_buffer_data_len>
 1f2:	e4 36       	cpi	r30, 0x64	; 100
 1f4:	50 f4       	brcc	.+20     	; 0x20a <__vector_18+0x38>
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	8e 0f       	add	r24, r30
 1fa:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <rx_buffer_data_len>
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 204:	e0 50       	subi	r30, 0x00	; 0
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	80 83       	st	Z, r24
 20a:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <rx_buffer_data_len>
 20e:	83 30       	cpi	r24, 0x03	; 3
 210:	80 f0       	brcs	.+32     	; 0x232 <__vector_18+0x60>
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	fc 01       	movw	r30, r24
 216:	e1 50       	subi	r30, 0x01	; 1
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	20 81       	ld	r18, Z
 21c:	2a 30       	cpi	r18, 0x0A	; 10
 21e:	49 f4       	brne	.+18     	; 0x232 <__vector_18+0x60>
 220:	fc 01       	movw	r30, r24
 222:	e2 50       	subi	r30, 0x02	; 2
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	80 81       	ld	r24, Z
 228:	8d 30       	cpi	r24, 0x0D	; 13
 22a:	19 f4       	brne	.+6      	; 0x232 <__vector_18+0x60>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <rx_buffer_has_message>
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

Disassembly of section .text.__vector_30:

00000352 <__vector_30>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART1_TX_vect){
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	8f 93       	push	r24
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 362:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <tx_buffer_cursor>
 366:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <tx_buffer_data_len>
 36a:	e8 17       	cp	r30, r24
 36c:	58 f4       	brcc	.+22     	; 0x384 <__vector_30+0x32>
		UDR1=tx_buffer[tx_buffer_cursor++];
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	8e 0f       	add	r24, r30
 372:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <tx_buffer_cursor>
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	e4 5d       	subi	r30, 0xD4	; 212
 37a:	fd 4f       	sbci	r31, 0xFD	; 253
 37c:	80 81       	ld	r24, Z
 37e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 382:	04 c0       	rjmp	.+8      	; 0x38c <__vector_30+0x3a>
		}else{
		tx_buffer_cursor=0;
 384:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <tx_buffer_cursor>
		tx_buffer_data_len=0;
 388:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <tx_buffer_data_len>
	}
}
 38c:	ff 91       	pop	r31
 38e:	ef 91       	pop	r30
 390:	8f 91       	pop	r24
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

Disassembly of section .text.__vector_28:

00000246 <__vector_28>:
	{
		msg[i]=rx_buffer[i];
	}
	uart1_hal_clear_rx_buffer();
	return rx_buffer_data_len-2;
}
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
 25a:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <rx_buffer_has_message>
 25e:	81 11       	cpse	r24, r1
 260:	0e c0       	rjmp	.+28     	; 0x27e <__vector_28+0x38>
 262:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <rx_buffer_data_len>
 266:	e4 36       	cpi	r30, 0x64	; 100
 268:	50 f4       	brcc	.+20     	; 0x27e <__vector_28+0x38>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	8e 0f       	add	r24, r30
 26e:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <rx_buffer_data_len>
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 278:	ec 50       	subi	r30, 0x0C	; 12
 27a:	fd 4f       	sbci	r31, 0xFD	; 253
 27c:	80 83       	st	Z, r24
 27e:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <rx_buffer_data_len>
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	fc 01       	movw	r30, r24
 286:	ed 50       	subi	r30, 0x0D	; 13
 288:	fd 4f       	sbci	r31, 0xFD	; 253
 28a:	20 81       	ld	r18, Z
 28c:	2d 30       	cpi	r18, 0x0D	; 13
 28e:	49 f4       	brne	.+18     	; 0x2a2 <__vector_28+0x5c>
 290:	fc 01       	movw	r30, r24
 292:	ee 50       	subi	r30, 0x0E	; 14
 294:	fd 4f       	sbci	r31, 0xFD	; 253
 296:	80 81       	ld	r24, Z
 298:	8a 30       	cpi	r24, 0x0A	; 10
 29a:	19 f4       	brne	.+6      	; 0x2a2 <__vector_28+0x5c>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <rx_buffer_has_message>
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

Disassembly of section .text.main:

000004a8 <main>:

int main(void)
{
	//test_lora_module_start();
	//test_SCD30_module_start();
    test_PM_HAL_start();
 4a8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <test_PM_HAL_start>
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <main+0x4>

Disassembly of section .text.test_sleep_cmd:

0000012c <test_sleep_cmd>:
		test_sleep_cmd();
		
	}
}

void test_sleep_cmd(){
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	69 97       	sbiw	r28, 0x19	; 25
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
	char msg1[]="Before sleep";
 144:	2e e0       	ldi	r18, 0x0E	; 14
 146:	31 e0       	ldi	r19, 0x01	; 1
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	8d e0       	ldi	r24, 0x0D	; 13
 14c:	f9 01       	movw	r30, r18
 14e:	8e 01       	movw	r16, r28
 150:	0f 5f       	subi	r16, 0xFF	; 255
 152:	1f 4f       	sbci	r17, 0xFF	; 255
 154:	d8 01       	movw	r26, r16
 156:	74 2f       	mov	r23, r20
 158:	0e 94 3d 02 	call	0x47a	; 0x47a <__movmemx_qi>
	uart0_hal_send_message(msg1, strlen(msg1));
 15c:	b8 01       	movw	r22, r16
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	0e 94 27 02 	call	0x44e	; 0x44e <strlen>
 164:	68 2f       	mov	r22, r24
 166:	c8 01       	movw	r24, r16
 168:	0e 94 0d 02 	call	0x41a	; 0x41a <uart0_hal_send_message>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	81 ee       	ldi	r24, 0xE1	; 225
 170:	94 e0       	ldi	r25, 0x04	; 4
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <test_sleep_cmd+0x46>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <test_sleep_cmd+0x50>
 17c:	00 00       	nop
	_delay_ms(200);
	PM_HAL_enter_power_down();
 17e:	0e 94 ce 01 	call	0x39c	; 0x39c <PM_HAL_enter_power_down>
	char msg2[]="After sleep";
 182:	2b e1       	ldi	r18, 0x1B	; 27
 184:	31 e0       	ldi	r19, 0x01	; 1
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	f9 01       	movw	r30, r18
 18c:	de 01       	movw	r26, r28
 18e:	1e 96       	adiw	r26, 0x0e	; 14
 190:	74 2f       	mov	r23, r20
 192:	0e 94 3d 02 	call	0x47a	; 0x47a <__movmemx_qi>
	uart0_hal_send_message(msg2, strlen(msg2));
 196:	03 5f       	subi	r16, 0xF3	; 243
 198:	1f 4f       	sbci	r17, 0xFF	; 255
 19a:	b8 01       	movw	r22, r16
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	0e 94 27 02 	call	0x44e	; 0x44e <strlen>
 1a2:	68 2f       	mov	r22, r24
 1a4:	c8 01       	movw	r24, r16
 1a6:	0e 94 0d 02 	call	0x41a	; 0x41a <uart0_hal_send_message>
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	81 ee       	ldi	r24, 0xE1	; 225
 1ae:	94 e0       	ldi	r25, 0x04	; 4
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <test_sleep_cmd+0x84>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <test_sleep_cmd+0x8e>
 1ba:	00 00       	nop
	_delay_ms(200);
 1bc:	69 96       	adiw	r28, 0x19	; 25
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

Disassembly of section .text.test_PM_HAL_start:

000002b6 <test_PM_HAL_start>:
#include "../../HAL/PM/PM_HAL.h"
#include "../../HAL/UART0/UART0_HAL.h"

void test_sleep_cmd();

void test_PM_HAL_start(){
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <test_PM_HAL_start+0x6>
 2bc:	00 d0       	rcall	.+0      	; 0x2be <test_PM_HAL_start+0x8>
 2be:	1f 92       	push	r1
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
	uart0_hal_init();
 2c4:	0e 94 ef 01 	call	0x3de	; 0x3de <uart0_hal_init>
	char msg[]="Init";
 2c8:	27 e2       	ldi	r18, 0x27	; 39
 2ca:	31 e0       	ldi	r19, 0x01	; 1
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	85 e0       	ldi	r24, 0x05	; 5
 2d0:	f9 01       	movw	r30, r18
 2d2:	8e 01       	movw	r16, r28
 2d4:	0f 5f       	subi	r16, 0xFF	; 255
 2d6:	1f 4f       	sbci	r17, 0xFF	; 255
 2d8:	d8 01       	movw	r26, r16
 2da:	74 2f       	mov	r23, r20
 2dc:	0e 94 3d 02 	call	0x47a	; 0x47a <__movmemx_qi>
	uart0_hal_send_message(msg, strlen(msg));
 2e0:	b8 01       	movw	r22, r16
 2e2:	80 e8       	ldi	r24, 0x80	; 128
 2e4:	0e 94 27 02 	call	0x44e	; 0x44e <strlen>
 2e8:	68 2f       	mov	r22, r24
 2ea:	c8 01       	movw	r24, r16
 2ec:	0e 94 0d 02 	call	0x41a	; 0x41a <uart0_hal_send_message>
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	84 e3       	ldi	r24, 0x34	; 52
 2f4:	9c e0       	ldi	r25, 0x0C	; 12
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <test_PM_HAL_start+0x40>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <test_PM_HAL_start+0x4a>
 300:	00 00       	nop
	_delay_ms(500);
	while(1){
		test_sleep_cmd();
 302:	0e 94 96 00 	call	0x12c	; 0x12c <test_sleep_cmd>
 306:	fd cf       	rjmp	.-6      	; 0x302 <test_PM_HAL_start+0x4c>

Disassembly of section .text.libgcc:

0000047a <__movmemx_qi>:
 47a:	99 27       	eor	r25, r25

0000047c <__movmemx_hi>:
 47c:	77 fd       	sbrc	r23, 7
 47e:	05 c0       	rjmp	.+10     	; 0x48a <__movmemx_hi+0xe>
 480:	05 90       	lpm	r0, Z+
 482:	0d 92       	st	X+, r0
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	e1 f7       	brne	.-8      	; 0x480 <__movmemx_hi+0x4>
 488:	08 95       	ret
 48a:	01 90       	ld	r0, Z+
 48c:	0d 92       	st	X+, r0
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	e1 f7       	brne	.-8      	; 0x48a <__movmemx_hi+0xe>
 492:	08 95       	ret

Disassembly of section .text.avrlibc:

0000044e <strlen>:
 44e:	cf 92       	push	r12
 450:	df 92       	push	r13
 452:	ef 92       	push	r14
 454:	6b 01       	movw	r12, r22
 456:	e8 2e       	mov	r14, r24
 458:	a8 2f       	mov	r26, r24
 45a:	cb 01       	movw	r24, r22
 45c:	fc 01       	movw	r30, r24
 45e:	24 91       	lpm	r18, Z
 460:	a7 fd       	sbrc	r26, 7
 462:	20 81       	ld	r18, Z
 464:	22 23       	and	r18, r18
 466:	19 f0       	breq	.+6      	; 0x46e <strlen+0x20>
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	a1 1d       	adc	r26, r1
 46c:	f7 cf       	rjmp	.-18     	; 0x45c <strlen+0xe>
 46e:	8c 19       	sub	r24, r12
 470:	9d 09       	sbc	r25, r13
 472:	ef 90       	pop	r14
 474:	df 90       	pop	r13
 476:	cf 90       	pop	r12
 478:	08 95       	ret
