
methane_sensor_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000528  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800100  00800100  00000528  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  00000557  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021ba  00000000  00000000  000006af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e28  00000000  00000000  00002869  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b2c  00000000  00000000  00003691  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002fc  00000000  00000000  000041c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c5  00000000  00000000  000044bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000754  00000000  00000000  00004881  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004b0  000004b0  00000524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000050e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.TWI_HAL_init 0000001c  0000043a  0000043a  000004ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.TWI_HAL_start 00000050  00000290  00000290  00000304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.TWI_HAL_write_byte 0000002c  000003e4  000003e4  00000458  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.TWI_HAL_read_byte_ack 00000014  00000472  00000472  000004e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.TWI_HAL_read_byte_nack 00000014  00000486  00000486  000004fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.TWI_HAL_stop 00000010  0000049a  0000049a  0000050e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.uart0_hal_init 0000003c  00000374  00000374  000003e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.uart0_hal_send_message 00000034  000003b0  000003b0  00000424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_20 0000004a  000002e0  000002e0  00000354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_18 00000074  000001ac  000001ac  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.rx_buffer_has_message 00000001  00800358  00800358  00000528  2**0
                  ALLOC
 25 .bss.rx_buffer_data_len 00000001  00800359  00800359  00000528  2**0
                  ALLOC
 26 .bss.tx_buffer_cursor 00000001  0080035a  0080035a  00000528  2**0
                  ALLOC
 27 .bss.tx_buffer_data_len 00000001  0080035b  0080035b  00000528  2**0
                  ALLOC
 28 .text.__vector_30 0000004a  0000032a  0000032a  0000039e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_28 00000070  00000220  00000220  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss.rx_buffer_has_message 00000001  0080035c  0080035c  00000528  2**0
                  ALLOC
 31 .bss.rx_buffer_data_len 00000001  0080035d  0080035d  00000528  2**0
                  ALLOC
 32 .bss.rx_buffer 00000064  008002f4  008002f4  00000528  2**0
                  ALLOC
 33 .bss.tx_buffer_cursor 00000001  0080035e  0080035e  00000528  2**0
                  ALLOC
 34 .bss.tx_buffer_data_len 00000001  0080035f  0080035f  00000528  2**0
                  ALLOC
 35 .bss.tx_buffer 000000c8  0080022c  0080022c  00000528  2**0
                  ALLOC
 36 .text.main    00000006  000004aa  000004aa  0000051e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.throw_error 0000002a  00000410  00000410  00000484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.read_firmware 0000009e  0000010e  0000010e  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.test_SCD30_module_start 0000001c  00000456  00000456  000004ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
   8:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
   c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  10:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  14:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  18:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  1c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  20:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  24:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  28:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  2c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  30:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  34:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  38:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  3c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  40:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  44:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  48:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_18>
  4c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  50:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_20>
  54:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  58:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  5c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  60:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  64:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  68:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  6c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  70:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_28>
  74:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  78:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_30>
  7c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  80:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  84:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  88:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  8c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  90:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  94:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  98:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  9c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  a0:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  a4:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  a8:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  ac:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>
  b0:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__bad_interrupt>

000000b4 <.dinit>:
  b4:	01 00       	.word	0x0001	; ????
  b6:	03 60       	ori	r16, 0x03	; 3
  b8:	80 00       	.word	0x0080	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	e4 eb       	ldi	r30, 0xB4	; 180
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	17 c0       	rjmp	.+46     	; 0xfc <__do_clear_bss+0x8>
  ce:	b5 91       	lpm	r27, Z+
  d0:	a5 91       	lpm	r26, Z+
  d2:	35 91       	lpm	r19, Z+
  d4:	25 91       	lpm	r18, Z+
  d6:	05 91       	lpm	r16, Z+
  d8:	07 fd       	sbrc	r16, 7
  da:	0c c0       	rjmp	.+24     	; 0xf4 <__do_clear_bss>
  dc:	95 91       	lpm	r25, Z+
  de:	85 91       	lpm	r24, Z+
  e0:	ef 01       	movw	r28, r30
  e2:	f9 2f       	mov	r31, r25
  e4:	e8 2f       	mov	r30, r24
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0x20>
  f0:	fe 01       	movw	r30, r28
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_clear_bss+0x8>

000000f4 <__do_clear_bss>:
  f4:	1d 92       	st	X+, r1
  f6:	a2 17       	cp	r26, r18
  f8:	b3 07       	cpc	r27, r19
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__do_clear_bss>
  fc:	e9 3b       	cpi	r30, 0xB9	; 185
  fe:	f4 07       	cpc	r31, r20
 100:	31 f7       	brne	.-52     	; 0xce <__do_copy_data+0x8>
 102:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
 106:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>

Disassembly of section .text:

000004b0 <__bad_interrupt>:
 4b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.TWI_HAL_init:

0000043a <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR0=TWI_TWBR; //Set bit generator
 43a:	80 e2       	ldi	r24, 0x20	; 32
 43c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR0, 0b00000011); //set prescale to 1
 440:	e9 eb       	ldi	r30, 0xB9	; 185
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	8c 7f       	andi	r24, 0xFC	; 252
 448:	80 83       	st	Z, r24
	
	set_bit(TWCR0, 2); //Enable TWI
 44a:	ec eb       	ldi	r30, 0xBC	; 188
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	84 60       	ori	r24, 0x04	; 4
 452:	80 83       	st	Z, r24
 454:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00000290 <TWI_HAL_start>:
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	86 2b       	or	r24, r22
	uint8_t status;
	
	TWCR0=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send start condition
 298:	94 ea       	ldi	r25, 0xA4	; 164
 29a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while (!get_bit(TWCR0, TWINT)); //Wait to finish job
 29e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a2:	99 23       	and	r25, r25
 2a4:	e4 f7       	brge	.-8      	; 0x29e <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR0);
 2a6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2aa:	98 7f       	andi	r25, 0xF8	; 248
	
	if(status != TWI_CODE_START) return 0; //Check status is success
 2ac:	98 30       	cpi	r25, 0x08	; 8
 2ae:	91 f4       	brne	.+36     	; 0x2d4 <TWI_HAL_start+0x44>
	
	TWDR0=addr_type; //Set Write addr
 2b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0=(1<<TWINT)|(1<<TWEN); //Start transmission of addr
 2b4:	84 e8       	ldi	r24, 0x84	; 132
 2b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while (!get_bit(TWCR0, TWINT)); //Wait to finish job
 2ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2be:	88 23       	and	r24, r24
 2c0:	e4 f7       	brge	.-8      	; 0x2ba <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR0);
 2c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2c6:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return 1; //Success
 2c8:	88 31       	cpi	r24, 0x18	; 24
 2ca:	31 f0       	breq	.+12     	; 0x2d8 <TWI_HAL_start+0x48>
 2cc:	80 34       	cpi	r24, 0x40	; 64
 2ce:	31 f4       	brne	.+12     	; 0x2dc <TWI_HAL_start+0x4c>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret
	TWCR0=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Send start condition
	
	while (!get_bit(TWCR0, TWINT)); //Wait to finish job
	status=twi_read_status(TWSR0);
	
	if(status != TWI_CODE_START) return 0; //Check status is success
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret
	TWCR0=(1<<TWINT)|(1<<TWEN); //Start transmission of addr
	
	while (!get_bit(TWCR0, TWINT)); //Wait to finish job
	status=twi_read_status(TWSR0);
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return 1; //Success
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	08 95       	ret
	if(status == TWI_CODE_ADDR_W_TRANS_NACK_REC || TWI_CODE_ADDR_R_TRANS_NACK_REC) return 2; //Not response
 2dc:	82 e0       	ldi	r24, 0x02	; 2
	
	return 3; //Unknown error
}
 2de:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

000003e4 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR0=data;	//Set data
 3e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0=twi_start_transmission;
 3e8:	84 e8       	ldi	r24, 0x84	; 132
 3ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while (!get_bit(TWCR0, TWINT)); 
 3ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3f2:	88 23       	and	r24, r24
 3f4:	e4 f7       	brge	.-8      	; 0x3ee <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR0);
 3f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3fa:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return 1; //Success
 3fc:	88 32       	cpi	r24, 0x28	; 40
 3fe:	21 f0       	breq	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	if(status==TWI_CODE_DATA_TRANS_NACK_REC) return 2; //No response
 400:	80 33       	cpi	r24, 0x30	; 48
 402:	21 f4       	brne	.+8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	08 95       	ret
	TWCR0=twi_start_transmission;
	
	while (!get_bit(TWCR0, TWINT)); 
	status=twi_read_status(TWSR0);
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return 1; //Success
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	08 95       	ret
	if(status==TWI_CODE_DATA_TRANS_NACK_REC) return 2; //No response
	return 3;
 40c:	83 e0       	ldi	r24, 0x03	; 3
}
 40e:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00000472 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR0=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);
 472:	84 ec       	ldi	r24, 0xC4	; 196
 474:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!get_bit(TWCR0, TWINT)); 
 478:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 47c:	88 23       	and	r24, r24
 47e:	e4 f7       	brge	.-8      	; 0x478 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR0;
 480:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 484:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00000486 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR0=(1<<TWEN)|(1<<TWINT);
 486:	84 e8       	ldi	r24, 0x84	; 132
 488:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!get_bit(TWCR0, TWINT));
 48c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 490:	88 23       	and	r24, r24
 492:	e4 f7       	brge	.-8      	; 0x48c <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR0;
 494:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 498:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

0000049a <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR0=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);
 49a:	84 e9       	ldi	r24, 0x94	; 148
 49c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	 while(TWCR0&(1<<TWSTO));
 4a0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4a4:	84 fd       	sbrc	r24, 4
 4a6:	fc cf       	rjmp	.-8      	; 0x4a0 <TWI_HAL_stop+0x6>
 4a8:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00000374 <uart0_hal_init>:
uint8_t rx_buffer_has_message=0;

static void copy_buffer(uint8_t msg[]);

void uart0_hal_init(){
	set_bit(UCSR0B, 4); //Enable Rx
 374:	e1 ec       	ldi	r30, 0xC1	; 193
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	80 61       	ori	r24, 0x10	; 16
 37c:	80 83       	st	Z, r24
	set_bit(UCSR0B, 3); //Enable Tx
 37e:	80 81       	ld	r24, Z
 380:	88 60       	ori	r24, 0x08	; 8
 382:	80 83       	st	Z, r24
	set_bit(UCSR0B, 7); //interrupt Rx complete
 384:	80 81       	ld	r24, Z
 386:	80 68       	ori	r24, 0x80	; 128
 388:	80 83       	st	Z, r24
	set_bit(UCSR0B, 6); //interrupt Tx complete
 38a:	80 81       	ld	r24, Z
 38c:	80 64       	ori	r24, 0x40	; 64
 38e:	80 83       	st	Z, r24
	set_bit(UCSR0A, 1); //Set double speed
 390:	e0 ec       	ldi	r30, 0xC0	; 192
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	82 60       	ori	r24, 0x02	; 2
 398:	80 83       	st	Z, r24
	UCSR0C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
 39a:	86 e0       	ldi	r24, 0x06	; 6
 39c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0=(8000000/(8*57600))-1; //set baudrate
 3a0:	80 e1       	ldi	r24, 0x10	; 16
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	sei();
 3ac:	78 94       	sei
 3ae:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000003b0 <uart0_hal_send_message>:
}


void uart0_hal_send_message(uint8_t msg[], uint8_t length){
 3b0:	dc 01       	movw	r26, r24
	for (uint8_t i=0; i<length; i++)
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0b c0       	rjmp	.+22     	; 0x3cc <uart0_hal_send_message+0x1c>
	{
		tx_buffer[i]=msg[i];
 3b6:	29 2f       	mov	r18, r25
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	fd 01       	movw	r30, r26
 3bc:	e2 0f       	add	r30, r18
 3be:	f3 1f       	adc	r31, r19
 3c0:	40 81       	ld	r20, Z
 3c2:	f9 01       	movw	r30, r18
 3c4:	ec 59       	subi	r30, 0x9C	; 156
 3c6:	fe 4f       	sbci	r31, 0xFE	; 254
 3c8:	40 83       	st	Z, r20
	sei();
}


void uart0_hal_send_message(uint8_t msg[], uint8_t length){
	for (uint8_t i=0; i<length; i++)
 3ca:	9f 5f       	subi	r25, 0xFF	; 255
 3cc:	96 17       	cp	r25, r22
 3ce:	98 f3       	brcs	.-26     	; 0x3b6 <uart0_hal_send_message+0x6>
	{
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
 3d0:	60 93 5b 03 	sts	0x035B, r22	; 0x80035b <tx_buffer_data_len>
	tx_buffer_cursor=1;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <tx_buffer_cursor>
	UDR0=tx_buffer[0];
 3da:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
 3de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3e2:	08 95       	ret

Disassembly of section .text.__vector_20:

000002e0 <__vector_20>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	8f 93       	push	r24
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
 2f0:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <tx_buffer_cursor>
 2f4:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <tx_buffer_data_len>
 2f8:	e8 17       	cp	r30, r24
 2fa:	58 f4       	brcc	.+22     	; 0x312 <__vector_20+0x32>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	8e 0f       	add	r24, r30
 300:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <tx_buffer_cursor>
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	ec 59       	subi	r30, 0x9C	; 156
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	80 81       	ld	r24, Z
 30c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 310:	04 c0       	rjmp	.+8      	; 0x31a <__vector_20+0x3a>
 312:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <tx_buffer_cursor>
 316:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <tx_buffer_data_len>
 31a:	ff 91       	pop	r31
 31c:	ef 91       	pop	r30
 31e:	8f 91       	pop	r24
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

Disassembly of section .text.__vector_18:

000001ac <__vector_18>:
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
 1c0:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <rx_buffer_has_message>
 1c4:	81 11       	cpse	r24, r1
 1c6:	0e c0       	rjmp	.+28     	; 0x1e4 <__vector_18+0x38>
 1c8:	e0 91 59 03 	lds	r30, 0x0359	; 0x800359 <rx_buffer_data_len>
 1cc:	e4 36       	cpi	r30, 0x64	; 100
 1ce:	50 f4       	brcc	.+20     	; 0x1e4 <__vector_18+0x38>
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	8e 0f       	add	r24, r30
 1d4:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <rx_buffer_data_len>
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1de:	e0 50       	subi	r30, 0x00	; 0
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	80 83       	st	Z, r24
 1e4:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <rx_buffer_data_len>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	80 f0       	brcs	.+32     	; 0x20c <__vector_18+0x60>
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	fc 01       	movw	r30, r24
 1f0:	e1 50       	subi	r30, 0x01	; 1
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	20 81       	ld	r18, Z
 1f6:	2a 30       	cpi	r18, 0x0A	; 10
 1f8:	49 f4       	brne	.+18     	; 0x20c <__vector_18+0x60>
 1fa:	fc 01       	movw	r30, r24
 1fc:	e2 50       	subi	r30, 0x02	; 2
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	80 81       	ld	r24, Z
 202:	8d 30       	cpi	r24, 0x0D	; 13
 204:	19 f4       	brne	.+6      	; 0x20c <__vector_18+0x60>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <rx_buffer_has_message>
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

Disassembly of section .text.__vector_30:

0000032a <__vector_30>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART1_TX_vect){
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	8f 93       	push	r24
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 33a:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <tx_buffer_cursor>
 33e:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <tx_buffer_data_len>
 342:	e8 17       	cp	r30, r24
 344:	58 f4       	brcc	.+22     	; 0x35c <__vector_30+0x32>
		UDR1=tx_buffer[tx_buffer_cursor++];
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	8e 0f       	add	r24, r30
 34a:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <tx_buffer_cursor>
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	e4 5d       	subi	r30, 0xD4	; 212
 352:	fd 4f       	sbci	r31, 0xFD	; 253
 354:	80 81       	ld	r24, Z
 356:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 35a:	04 c0       	rjmp	.+8      	; 0x364 <__vector_30+0x3a>
		}else{
		tx_buffer_cursor=0;
 35c:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <tx_buffer_cursor>
		tx_buffer_data_len=0;
 360:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <tx_buffer_data_len>
	}
}
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	8f 91       	pop	r24
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

Disassembly of section .text.__vector_28:

00000220 <__vector_28>:
	{
		msg[i]=rx_buffer[i];
	}
	uart1_hal_clear_rx_buffer();
	return rx_buffer_data_len-2;
}
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
 234:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <rx_buffer_has_message>
 238:	81 11       	cpse	r24, r1
 23a:	0e c0       	rjmp	.+28     	; 0x258 <__vector_28+0x38>
 23c:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <rx_buffer_data_len>
 240:	e4 36       	cpi	r30, 0x64	; 100
 242:	50 f4       	brcc	.+20     	; 0x258 <__vector_28+0x38>
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	8e 0f       	add	r24, r30
 248:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <rx_buffer_data_len>
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 252:	ec 50       	subi	r30, 0x0C	; 12
 254:	fd 4f       	sbci	r31, 0xFD	; 253
 256:	80 83       	st	Z, r24
 258:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <rx_buffer_data_len>
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	fc 01       	movw	r30, r24
 260:	ed 50       	subi	r30, 0x0D	; 13
 262:	fd 4f       	sbci	r31, 0xFD	; 253
 264:	20 81       	ld	r18, Z
 266:	2d 30       	cpi	r18, 0x0D	; 13
 268:	49 f4       	brne	.+18     	; 0x27c <__vector_28+0x5c>
 26a:	fc 01       	movw	r30, r24
 26c:	ee 50       	subi	r30, 0x0E	; 14
 26e:	fd 4f       	sbci	r31, 0xFD	; 253
 270:	80 81       	ld	r24, Z
 272:	8a 30       	cpi	r24, 0x0A	; 10
 274:	19 f4       	brne	.+6      	; 0x27c <__vector_28+0x5c>
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <rx_buffer_has_message>
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

Disassembly of section .text.main:

000004aa <main>:
#include "TEST/SCD_30_module/test_SCD30_module.h"

int main(void)
{
	//test_lora_module_start();
	test_SCD30_module_start();
 4aa:	0e 94 2b 02 	call	0x456	; 0x456 <test_SCD30_module_start>
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <main+0x4>

Disassembly of section .text.throw_error:

00000410 <throw_error>:
	
	uart0_hal_send_message(data, 3);
	
}

void throw_error(uint8_t status, uint8_t index){
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	00 d0       	rcall	.+0      	; 0x416 <throw_error+0x6>
 416:	1f 92       	push	r1
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
	uint8_t msg[3];
	msg[0]=status;
 41c:	89 83       	std	Y+1, r24	; 0x01
	msg[1]=index;
 41e:	6a 83       	std	Y+2, r22	; 0x02
	msg[2]=0xFF;
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	8b 83       	std	Y+3, r24	; 0x03
	uart0_hal_send_message(msg, 3);
 424:	63 e0       	ldi	r22, 0x03	; 3
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <uart0_hal_send_message>
}
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

Disassembly of section .text.read_firmware:

0000010e <read_firmware>:
		}
	
	
}

void read_firmware(){
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <read_firmware+0x6>
 114:	1f 92       	push	r1
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
	uint8_t status;
	uint8_t data[]={0x00, 0x00, 0x00};
 11a:	19 82       	std	Y+1, r1	; 0x01
 11c:	1a 82       	std	Y+2, r1	; 0x02
 11e:	1b 82       	std	Y+3, r1	; 0x03
	
	TWI_HAL_init();
 120:	0e 94 1d 02 	call	0x43a	; 0x43a <TWI_HAL_init>
	
	status=TWI_HAL_start(0x61, WRITE);
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	81 e6       	ldi	r24, 0x61	; 97
 128:	0e 94 48 01 	call	0x290	; 0x290 <TWI_HAL_start>
	if(status!=1) 
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	21 f0       	breq	.+8      	; 0x138 <read_firmware+0x2a>
		return throw_error(status, 0);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	0e 94 08 02 	call	0x410	; 0x410 <throw_error>
 136:	34 c0       	rjmp	.+104    	; 0x1a0 <read_firmware+0x92>
		
	status=TWI_HAL_write_byte(0xD1);
 138:	81 ed       	ldi	r24, 0xD1	; 209
 13a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <TWI_HAL_write_byte>
	if(status!=1)
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	21 f0       	breq	.+8      	; 0x14a <read_firmware+0x3c>
		return throw_error(status, 1);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	0e 94 08 02 	call	0x410	; 0x410 <throw_error>
 148:	2b c0       	rjmp	.+86     	; 0x1a0 <read_firmware+0x92>
		
	status=TWI_HAL_write_byte(0x00);
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <TWI_HAL_write_byte>
	if(status!=1)
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	21 f0       	breq	.+8      	; 0x15c <read_firmware+0x4e>
		return throw_error(status, 2);
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	0e 94 08 02 	call	0x410	; 0x410 <throw_error>
 15a:	22 c0       	rjmp	.+68     	; 0x1a0 <read_firmware+0x92>
		
	TWI_HAL_stop();
 15c:	0e 94 4d 02 	call	0x49a	; 0x49a <TWI_HAL_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	8f e0       	ldi	r24, 0x0F	; 15
 162:	97 e2       	ldi	r25, 0x27	; 39
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <read_firmware+0x56>
 168:	00 c0       	rjmp	.+0      	; 0x16a <read_firmware+0x5c>
 16a:	00 00       	nop
	_delay_ms(5);
	
	status=TWI_HAL_start(0x61, READ);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	81 e6       	ldi	r24, 0x61	; 97
 170:	0e 94 48 01 	call	0x290	; 0x290 <TWI_HAL_start>
	if(status!=1)
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	21 f0       	breq	.+8      	; 0x180 <read_firmware+0x72>
		return throw_error(status, 3);
 178:	63 e0       	ldi	r22, 0x03	; 3
 17a:	0e 94 08 02 	call	0x410	; 0x410 <throw_error>
 17e:	10 c0       	rjmp	.+32     	; 0x1a0 <read_firmware+0x92>
		
	data[0]=TWI_HAL_read_byte_ack();
 180:	0e 94 39 02 	call	0x472	; 0x472 <TWI_HAL_read_byte_ack>
 184:	89 83       	std	Y+1, r24	; 0x01
	data[1]=TWI_HAL_read_byte_ack();
 186:	0e 94 39 02 	call	0x472	; 0x472 <TWI_HAL_read_byte_ack>
 18a:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=TWI_HAL_read_byte_nack();
 18c:	0e 94 43 02 	call	0x486	; 0x486 <TWI_HAL_read_byte_nack>
 190:	8b 83       	std	Y+3, r24	; 0x03
	
	TWI_HAL_stop();
 192:	0e 94 4d 02 	call	0x49a	; 0x49a <TWI_HAL_stop>
	
	uart0_hal_send_message(data, 3);
 196:	63 e0       	ldi	r22, 0x03	; 3
 198:	ce 01       	movw	r24, r28
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <uart0_hal_send_message>
	
}
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

Disassembly of section .text.test_SCD30_module_start:

00000456 <test_SCD30_module_start>:
void test_HAL();
void read_firmware();
void throw_error(uint8_t status, uint8_t index);

void test_SCD30_module_start(){
	uart0_hal_init();
 456:	0e 94 ba 01 	call	0x374	; 0x374 <uart0_hal_init>
	
		while(1){
			//test_HAL();
			read_firmware();
 45a:	0e 94 87 00 	call	0x10e	; 0x10e <_etext>
 45e:	2f ef       	ldi	r18, 0xFF	; 255
 460:	8d e3       	ldi	r24, 0x3D	; 61
 462:	99 e4       	ldi	r25, 0x49	; 73
 464:	21 50       	subi	r18, 0x01	; 1
 466:	80 40       	sbci	r24, 0x00	; 0
 468:	90 40       	sbci	r25, 0x00	; 0
 46a:	e1 f7       	brne	.-8      	; 0x464 <test_SCD30_module_start+0xe>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <test_SCD30_module_start+0x18>
 46e:	00 00       	nop
 470:	f4 cf       	rjmp	.-24     	; 0x45a <test_SCD30_module_start+0x4>
