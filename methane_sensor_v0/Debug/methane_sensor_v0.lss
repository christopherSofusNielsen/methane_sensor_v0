
methane_sensor_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000838  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f4  00800100  00800100  00000838  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003409  00000000  00000000  00000a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001193  00000000  00000000  00003e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f52  00000000  00000000  0000501f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000514  00000000  00000000  00005f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000465  00000000  00000000  00006488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fdf  00000000  00000000  000068ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  000078cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000007c0  000007c0  00000834  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.rn2483_init 00000008  0000079c  0000079c  00000810  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.rn2483_reset_active 00000008  000007a4  000007a4  00000818  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.rn2483_reset_deactive 00000008  000007ac  000007ac  00000820  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.copy_buffer 0000002e  00000696  00000696  0000070a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.uart0_hal_init 0000003c  000005c2  000005c2  00000636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.uart0_hal_send_message 00000034  000005fe  000005fe  00000672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.uart0_hal_message_ready 0000000e  0000076c  0000076c  000007e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.uart0_hal_clear_rx_buffer 0000000a  00000792  00000792  00000806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.uart0_hal_read_message_as_str 00000028  000006f0  000006f0  00000764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_20 0000004a  000004a8  000004a8  0000051c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_18 00000074  00000296  00000296  0000030a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .bss.rx_buffer_has_message 00000001  00800420  00800420  00000838  2**0
                  ALLOC
 26 .bss.rx_buffer_data_len 00000001  00800421  00800421  00000838  2**0
                  ALLOC
 27 .bss.tx_buffer_cursor 00000001  00800422  00800422  00000838  2**0
                  ALLOC
 28 .bss.tx_buffer_data_len 00000001  00800423  00800423  00000838  2**0
                  ALLOC
 29 .text.__vector_30 0000004a  000004f2  000004f2  00000566  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_28 00000070  0000030a  0000030a  0000037e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .bss.rx_buffer_has_message 00000001  00800424  00800424  00000838  2**0
                  ALLOC
 32 .bss.rx_buffer_data_len 00000001  00800425  00800425  00000838  2**0
                  ALLOC
 33 .bss.rx_buffer 00000064  008003bc  008003bc  00000838  2**0
                  ALLOC
 34 .bss.tx_buffer_cursor 00000001  00800426  00800426  00000838  2**0
                  ALLOC
 35 .bss.tx_buffer_data_len 00000001  00800427  00800427  00000838  2**0
                  ALLOC
 36 .bss.tx_buffer 000000c8  008002f4  008002f4  00000838  2**0
                  ALLOC
 37 .text.main    00000006  000007b4  000007b4  00000828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .progmemx.data 00000018  0000018d  0000018d  00000201  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .text.LM_join_network 000000ec  000001aa  000001aa  0000021e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.LM_strbeginswith 00000044  0000053c  0000053c  000005b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.LM_setPendingStates 0000000c  0000077a  0000077a  000007ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.LM_setMatchCase 0000000c  00000786  00000786  000007fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.LM_matchMessage 0000005e  0000044a  0000044a  000004be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.LM_transmit_msg 0000001c  00000736  00000736  000007aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.LM_read_msg 00000006  000007ba  000007ba  0000082e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .progmemx.data 0000007f  0000010e  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 47 .text.cmd_with_ending 00000032  00000632  00000632  000006a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .progmemx.data 00000005  000001a5  000001a5  00000219  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 49 .text.test_lora_module_start 00000066  000003e4  000003e4  00000458  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.libgcc  0000001a  00000752  00000752  000007c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.avrlibc 00000032  00000664  00000664  000006d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.avrlibc 00000042  00000580  00000580  000005f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.avrlibc 0000006a  0000037a  0000037a  000003ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.avrlibc 0000002c  000006c4  000006c4  00000738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.avrlibc 0000001e  00000718  00000718  0000078c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
   8:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
   c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  10:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  14:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  18:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  1c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  20:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  24:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  28:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  2c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  30:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  34:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  38:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  3c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  40:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  44:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  48:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_18>
  4c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  50:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_20>
  54:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  58:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  5c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  60:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  64:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  68:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  6c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  70:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_28>
  74:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  78:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_30>
  7c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  80:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  84:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  88:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  8c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  90:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  94:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  98:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  9c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  a0:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  a4:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  a8:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  ac:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>
  b0:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__bad_interrupt>

000000b4 <.dinit>:
  b4:	01 00       	.word	0x0001	; ????
  b6:	04 28       	or	r0, r4
  b8:	80 00       	.word	0x0080	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	e4 eb       	ldi	r30, 0xB4	; 180
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	17 c0       	rjmp	.+46     	; 0xfc <__do_clear_bss+0x8>
  ce:	b5 91       	lpm	r27, Z+
  d0:	a5 91       	lpm	r26, Z+
  d2:	35 91       	lpm	r19, Z+
  d4:	25 91       	lpm	r18, Z+
  d6:	05 91       	lpm	r16, Z+
  d8:	07 fd       	sbrc	r16, 7
  da:	0c c0       	rjmp	.+24     	; 0xf4 <__do_clear_bss>
  dc:	95 91       	lpm	r25, Z+
  de:	85 91       	lpm	r24, Z+
  e0:	ef 01       	movw	r28, r30
  e2:	f9 2f       	mov	r31, r25
  e4:	e8 2f       	mov	r30, r24
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0x20>
  f0:	fe 01       	movw	r30, r28
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_clear_bss+0x8>

000000f4 <__do_clear_bss>:
  f4:	1d 92       	st	X+, r1
  f6:	a2 17       	cp	r26, r18
  f8:	b3 07       	cpc	r27, r19
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__do_clear_bss>
  fc:	e9 3b       	cpi	r30, 0xB9	; 185
  fe:	f4 07       	cpc	r31, r20
 100:	31 f7       	brne	.-52     	; 0xce <__do_copy_data+0x8>
 102:	0e 94 da 03 	call	0x7b4	; 0x7b4 <main>
 106:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>

Disassembly of section .text:

000007c0 <__bad_interrupt>:
 7c0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.rn2483_init:

0000079c <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
 79c:	87 b1       	in	r24, 0x07	; 7
 79e:	84 60       	ori	r24, 0x04	; 4
 7a0:	87 b9       	out	0x07, r24	; 7
 7a2:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

000007a4 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
 7a4:	88 b1       	in	r24, 0x08	; 8
 7a6:	8b 7f       	andi	r24, 0xFB	; 251
 7a8:	88 b9       	out	0x08, r24	; 8
 7aa:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

000007ac <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
 7ac:	88 b1       	in	r24, 0x08	; 8
 7ae:	84 60       	ori	r24, 0x04	; 4
 7b0:	88 b9       	out	0x08, r24	; 8
 7b2:	08 95       	ret

Disassembly of section .text.copy_buffer:

00000696 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
 696:	bc 01       	movw	r22, r24
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	09 c0       	rjmp	.+18     	; 0x6ae <copy_buffer+0x18>
 69c:	fb 01       	movw	r30, r22
 69e:	e9 0f       	add	r30, r25
 6a0:	f1 1d       	adc	r31, r1
 6a2:	da 01       	movw	r26, r20
 6a4:	a0 50       	subi	r26, 0x00	; 0
 6a6:	bf 4f       	sbci	r27, 0xFF	; 255
 6a8:	2c 91       	ld	r18, X
 6aa:	20 83       	st	Z, r18
 6ac:	9f 5f       	subi	r25, 0xFF	; 255
 6ae:	49 2f       	mov	r20, r25
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	20 91 21 04 	lds	r18, 0x0421	; 0x800421 <rx_buffer_data_len>
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	22 50       	subi	r18, 0x02	; 2
 6ba:	31 09       	sbc	r19, r1
 6bc:	42 17       	cp	r20, r18
 6be:	53 07       	cpc	r21, r19
 6c0:	6c f3       	brlt	.-38     	; 0x69c <copy_buffer+0x6>
 6c2:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

000005c2 <uart0_hal_init>:
 5c2:	e1 ec       	ldi	r30, 0xC1	; 193
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	80 61       	ori	r24, 0x10	; 16
 5ca:	80 83       	st	Z, r24
 5cc:	80 81       	ld	r24, Z
 5ce:	88 60       	ori	r24, 0x08	; 8
 5d0:	80 83       	st	Z, r24
 5d2:	80 81       	ld	r24, Z
 5d4:	80 68       	ori	r24, 0x80	; 128
 5d6:	80 83       	st	Z, r24
 5d8:	80 81       	ld	r24, Z
 5da:	80 64       	ori	r24, 0x40	; 64
 5dc:	80 83       	st	Z, r24
 5de:	e0 ec       	ldi	r30, 0xC0	; 192
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	82 60       	ori	r24, 0x02	; 2
 5e6:	80 83       	st	Z, r24
 5e8:	86 e0       	ldi	r24, 0x06	; 6
 5ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 5ee:	80 e1       	ldi	r24, 0x10	; 16
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 5f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 5fa:	78 94       	sei
 5fc:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000005fe <uart0_hal_send_message>:
 5fe:	dc 01       	movw	r26, r24
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0b c0       	rjmp	.+22     	; 0x61a <uart0_hal_send_message+0x1c>
 604:	29 2f       	mov	r18, r25
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	fd 01       	movw	r30, r26
 60a:	e2 0f       	add	r30, r18
 60c:	f3 1f       	adc	r31, r19
 60e:	40 81       	ld	r20, Z
 610:	f9 01       	movw	r30, r18
 612:	ec 59       	subi	r30, 0x9C	; 156
 614:	fe 4f       	sbci	r31, 0xFE	; 254
 616:	40 83       	st	Z, r20
 618:	9f 5f       	subi	r25, 0xFF	; 255
 61a:	96 17       	cp	r25, r22
 61c:	98 f3       	brcs	.-26     	; 0x604 <uart0_hal_send_message+0x6>
 61e:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <tx_buffer_data_len>
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <tx_buffer_cursor>
 628:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
 62c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 630:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

0000076c <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
 76c:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <rx_buffer_has_message>
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	91 11       	cpse	r25, r1
 774:	01 c0       	rjmp	.+2      	; 0x778 <uart0_hal_message_ready+0xc>
 776:	80 e0       	ldi	r24, 0x00	; 0
}
 778:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00000792 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
 792:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <rx_buffer_has_message>
	rx_buffer_data_len=0;
 796:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <rx_buffer_data_len>
 79a:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

000006f0 <uart0_hal_read_message_as_str>:
	{
		msg[i]=rx_buffer[i];
	}
}

uint8_t uart0_hal_read_message_as_str(uint8_t msg[]){
 6f0:	0f 93       	push	r16
 6f2:	1f 93       	push	r17
 6f4:	cf 93       	push	r28
 6f6:	8c 01       	movw	r16, r24
	copy_buffer(msg);
 6f8:	0e 94 4b 03 	call	0x696	; 0x696 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
 6fc:	c0 91 21 04 	lds	r28, 0x0421	; 0x800421 <rx_buffer_data_len>
 700:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
 702:	f8 01       	movw	r30, r16
 704:	ec 0f       	add	r30, r28
 706:	f1 1d       	adc	r31, r1
 708:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
 70a:	0e 94 c9 03 	call	0x792	; 0x792 <uart0_hal_clear_rx_buffer>
	return len;
}
 70e:	8c 2f       	mov	r24, r28
 710:	cf 91       	pop	r28
 712:	1f 91       	pop	r17
 714:	0f 91       	pop	r16
 716:	08 95       	ret

Disassembly of section .text.__vector_20:

000004a8 <__vector_20>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
 4a8:	1f 92       	push	r1
 4aa:	0f 92       	push	r0
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	0f 92       	push	r0
 4b0:	11 24       	eor	r1, r1
 4b2:	8f 93       	push	r24
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
 4b8:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <tx_buffer_cursor>
 4bc:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <tx_buffer_data_len>
 4c0:	e8 17       	cp	r30, r24
 4c2:	58 f4       	brcc	.+22     	; 0x4da <__vector_20+0x32>
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	8e 0f       	add	r24, r30
 4c8:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <tx_buffer_cursor>
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	ec 59       	subi	r30, 0x9C	; 156
 4d0:	fe 4f       	sbci	r31, 0xFE	; 254
 4d2:	80 81       	ld	r24, Z
 4d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__vector_20+0x3a>
 4da:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <tx_buffer_cursor>
 4de:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <tx_buffer_data_len>
 4e2:	ff 91       	pop	r31
 4e4:	ef 91       	pop	r30
 4e6:	8f 91       	pop	r24
 4e8:	0f 90       	pop	r0
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	0f 90       	pop	r0
 4ee:	1f 90       	pop	r1
 4f0:	18 95       	reti

Disassembly of section .text.__vector_18:

00000296 <__vector_18>:
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	2f 93       	push	r18
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
 2aa:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <rx_buffer_has_message>
 2ae:	81 11       	cpse	r24, r1
 2b0:	0e c0       	rjmp	.+28     	; 0x2ce <__vector_18+0x38>
 2b2:	e0 91 21 04 	lds	r30, 0x0421	; 0x800421 <rx_buffer_data_len>
 2b6:	e4 36       	cpi	r30, 0x64	; 100
 2b8:	50 f4       	brcc	.+20     	; 0x2ce <__vector_18+0x38>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	8e 0f       	add	r24, r30
 2be:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <rx_buffer_data_len>
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2c8:	e0 50       	subi	r30, 0x00	; 0
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	80 83       	st	Z, r24
 2ce:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <rx_buffer_data_len>
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	80 f0       	brcs	.+32     	; 0x2f6 <__vector_18+0x60>
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	e1 50       	subi	r30, 0x01	; 1
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	20 81       	ld	r18, Z
 2e0:	2a 30       	cpi	r18, 0x0A	; 10
 2e2:	49 f4       	brne	.+18     	; 0x2f6 <__vector_18+0x60>
 2e4:	fc 01       	movw	r30, r24
 2e6:	e2 50       	subi	r30, 0x02	; 2
 2e8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ea:	80 81       	ld	r24, Z
 2ec:	8d 30       	cpi	r24, 0x0D	; 13
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <__vector_18+0x60>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <rx_buffer_has_message>
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

Disassembly of section .text.__vector_30:

000004f2 <__vector_30>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART1_TX_vect){
 4f2:	1f 92       	push	r1
 4f4:	0f 92       	push	r0
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	0f 92       	push	r0
 4fa:	11 24       	eor	r1, r1
 4fc:	8f 93       	push	r24
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 502:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <tx_buffer_cursor>
 506:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <tx_buffer_data_len>
 50a:	e8 17       	cp	r30, r24
 50c:	58 f4       	brcc	.+22     	; 0x524 <__vector_30+0x32>
		UDR1=tx_buffer[tx_buffer_cursor++];
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	8e 0f       	add	r24, r30
 512:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <tx_buffer_cursor>
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	ec 50       	subi	r30, 0x0C	; 12
 51a:	fd 4f       	sbci	r31, 0xFD	; 253
 51c:	80 81       	ld	r24, Z
 51e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 522:	04 c0       	rjmp	.+8      	; 0x52c <__vector_30+0x3a>
		}else{
		tx_buffer_cursor=0;
 524:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <tx_buffer_cursor>
		tx_buffer_data_len=0;
 528:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <tx_buffer_data_len>
	}
}
 52c:	ff 91       	pop	r31
 52e:	ef 91       	pop	r30
 530:	8f 91       	pop	r24
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti

Disassembly of section .text.__vector_28:

0000030a <__vector_28>:
	{
		msg[i]=rx_buffer[i];
	}
	uart1_hal_clear_rx_buffer();
	return rx_buffer_data_len-2;
}
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
 31e:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <rx_buffer_has_message>
 322:	81 11       	cpse	r24, r1
 324:	0e c0       	rjmp	.+28     	; 0x342 <__vector_28+0x38>
 326:	e0 91 25 04 	lds	r30, 0x0425	; 0x800425 <rx_buffer_data_len>
 32a:	e4 36       	cpi	r30, 0x64	; 100
 32c:	50 f4       	brcc	.+20     	; 0x342 <__vector_28+0x38>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	8e 0f       	add	r24, r30
 332:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <rx_buffer_data_len>
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 33c:	e4 54       	subi	r30, 0x44	; 68
 33e:	fc 4f       	sbci	r31, 0xFC	; 252
 340:	80 83       	st	Z, r24
 342:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <rx_buffer_data_len>
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	fc 01       	movw	r30, r24
 34a:	e5 54       	subi	r30, 0x45	; 69
 34c:	fc 4f       	sbci	r31, 0xFC	; 252
 34e:	20 81       	ld	r18, Z
 350:	2d 30       	cpi	r18, 0x0D	; 13
 352:	49 f4       	brne	.+18     	; 0x366 <__vector_28+0x5c>
 354:	fc 01       	movw	r30, r24
 356:	e6 54       	subi	r30, 0x46	; 70
 358:	fc 4f       	sbci	r31, 0xFC	; 252
 35a:	80 81       	ld	r24, Z
 35c:	8a 30       	cpi	r24, 0x0A	; 10
 35e:	19 f4       	brne	.+6      	; 0x366 <__vector_28+0x5c>
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <rx_buffer_has_message>
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	2f 91       	pop	r18
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

Disassembly of section .text.main:

000007b4 <main>:
#include "TEST/lora-module/test_lora_module.h"


int main(void)
{
	test_lora_module_start();
 7b4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <test_lora_module_start>
 7b8:	ff cf       	rjmp	.-2      	; 0x7b8 <main+0x4>

Disassembly of section .text.LM_join_network:

000001aa <LM_join_network>:
#include "join_network.h"
#include "../lora_module.h"
#include "../../../HAL/RN2483/RN2483_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"

LM_STATUS LM_join_network(){
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	28 97       	sbiw	r28, 0x08	; 8
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
	
	JN_STATES state=JN_HW_RESET_RN2483;
 1c0:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	
	while(1){
		switch(state){
 1c2:	12 30       	cpi	r17, 0x02	; 2
 1c4:	69 f1       	breq	.+90     	; 0x220 <LM_join_network+0x76>
 1c6:	30 f4       	brcc	.+12     	; 0x1d4 <LM_join_network+0x2a>
 1c8:	11 23       	and	r17, r17
 1ca:	59 f0       	breq	.+22     	; 0x1e2 <LM_join_network+0x38>
 1cc:	11 30       	cpi	r17, 0x01	; 1
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <LM_join_network+0x28>
 1d0:	44 c0       	rjmp	.+136    	; 0x25a <LM_join_network+0xb0>
 1d2:	f7 cf       	rjmp	.-18     	; 0x1c2 <LM_join_network+0x18>
 1d4:	1b 30       	cpi	r17, 0x0B	; 11
 1d6:	09 f4       	brne	.+2      	; 0x1da <LM_join_network+0x30>
 1d8:	51 c0       	rjmp	.+162    	; 0x27c <LM_join_network+0xd2>
 1da:	1d 30       	cpi	r17, 0x0D	; 13
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <LM_join_network+0x36>
 1de:	50 c0       	rjmp	.+160    	; 0x280 <LM_join_network+0xd6>
 1e0:	f0 cf       	rjmp	.-32     	; 0x1c2 <LM_join_network+0x18>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
 1e2:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <rn2483_reset_active>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	2f e3       	ldi	r18, 0x3F	; 63
 1e8:	8d e0       	ldi	r24, 0x0D	; 13
 1ea:	93 e0       	ldi	r25, 0x03	; 3
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <LM_join_network+0x42>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LM_join_network+0x4c>
 1f6:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
 1f8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <rn2483_reset_deactive>
				
				LM_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
 1fc:	4d e0       	ldi	r20, 0x0D	; 13
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	0e 94 bd 03 	call	0x77a	; 0x77a <LM_setPendingStates>
				LM_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
 20c:	2d e8       	ldi	r18, 0x8D	; 141
 20e:	31 e0       	ldi	r19, 0x01	; 1
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	ce 01       	movw	r24, r28
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	0e 94 c3 03 	call	0x786	; 0x786 <LM_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
 21c:	11 e0       	ldi	r17, 0x01	; 1
			break;
 21e:	d1 cf       	rjmp	.-94     	; 0x1c2 <LM_join_network+0x18>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
 220:	44 e9       	ldi	r20, 0x94	; 148
 222:	51 e0       	ldi	r21, 0x01	; 1
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	8c e2       	ldi	r24, 0x2C	; 44
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	0e 94 19 03 	call	0x632	; 0x632 <cmd_with_ending>
				LM_transmit_msg(lm_msg);
 22e:	8c e2       	ldi	r24, 0x2C	; 44
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	0e 94 9b 03 	call	0x736	; 0x736 <LM_transmit_msg>
				
				LM_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_FATAL_ERROR);
 236:	4d e0       	ldi	r20, 0x0D	; 13
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	6b e0       	ldi	r22, 0x0B	; 11
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	0e 94 bd 03 	call	0x77a	; 0x77a <LM_setPendingStates>
				LM_setMatchCase(&stateData, LM_EXACT, OK);
 246:	22 ea       	ldi	r18, 0xA2	; 162
 248:	31 e0       	ldi	r19, 0x01	; 1
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	ce 01       	movw	r24, r28
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	0e 94 c3 03 	call	0x786	; 0x786 <LM_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 256:	11 e0       	ldi	r17, 0x01	; 1
			break;
 258:	b4 cf       	rjmp	.-152    	; 0x1c2 <LM_join_network+0x18>
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
 25a:	0e 94 b6 03 	call	0x76c	; 0x76c <uart0_hal_message_ready>
 25e:	89 2b       	or	r24, r25
 260:	09 f4       	brne	.+2      	; 0x264 <LM_join_network+0xba>
 262:	af cf       	rjmp	.-162    	; 0x1c2 <LM_join_network+0x18>
					LM_read_msg(lm_msg);
 264:	8c e2       	ldi	r24, 0x2C	; 44
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LM_read_msg>
					state=LM_matchMessage(&stateData, lm_msg);
 26c:	6c e2       	ldi	r22, 0x2C	; 44
 26e:	72 e0       	ldi	r23, 0x02	; 2
 270:	ce 01       	movw	r24, r28
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	0e 94 25 02 	call	0x44a	; 0x44a <LM_matchMessage>
 278:	18 2f       	mov	r17, r24
 27a:	a3 cf       	rjmp	.-186    	; 0x1c2 <LM_join_network+0x18>
				LM_setMatchCase(&stateData, LM_EXACT, OK);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	01 c0       	rjmp	.+2      	; 0x282 <LM_join_network+0xd8>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
 280:	82 e0       	ldi	r24, 0x02	; 2
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
 282:	28 96       	adiw	r28, 0x08	; 8
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	08 95       	ret

Disassembly of section .text.LM_strbeginswith:

0000053c <LM_strbeginswith>:

void LM_read_msg(char msg[]){
	uart0_hal_read_message_as_str(msg);
}

static bool LM_strbeginswith(char *s1, const char *s2){
 53c:	cf 92       	push	r12
 53e:	df 92       	push	r13
 540:	ef 92       	push	r14
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	ec 01       	movw	r28, r24
 54c:	6a 01       	movw	r12, r20
 54e:	e6 2e       	mov	r14, r22
	return strncmp(s1, s2, strlen(s2))==0?true:false;
 550:	86 2f       	mov	r24, r22
 552:	ba 01       	movw	r22, r20
 554:	0e 94 62 03 	call	0x6c4	; 0x6c4 <strlen>
 558:	8c 01       	movw	r16, r24
 55a:	be 01       	movw	r22, r28
 55c:	80 e8       	ldi	r24, 0x80	; 128
 55e:	4e 2d       	mov	r20, r14
 560:	96 01       	movw	r18, r12
 562:	0e 94 bd 01 	call	0x37a	; 0x37a <strncmp>
 566:	21 e0       	ldi	r18, 0x01	; 1
 568:	89 2b       	or	r24, r25
 56a:	09 f0       	breq	.+2      	; 0x56e <LM_strbeginswith+0x32>
 56c:	20 e0       	ldi	r18, 0x00	; 0
}
 56e:	82 2f       	mov	r24, r18
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	ef 90       	pop	r14
 57a:	df 90       	pop	r13
 57c:	cf 90       	pop	r12
 57e:	08 95       	ret

Disassembly of section .text.LM_setPendingStates:

0000077a <LM_setPendingStates>:
//LM_STATE_DATA lm_state_data_obj;
static bool LM_strbeginswith(char *s1, const char *s2);


void LM_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
 77a:	fc 01       	movw	r30, r24
 77c:	71 83       	std	Z+1, r23	; 0x01
 77e:	60 83       	st	Z, r22
	sd->failure_state=failed;
 780:	53 83       	std	Z+3, r21	; 0x03
 782:	42 83       	std	Z+2, r20	; 0x02
 784:	08 95       	ret

Disassembly of section .text.LM_setMatchCase:

00000786 <LM_setMatchCase>:
}

void LM_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
 786:	fc 01       	movw	r30, r24
 788:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
 78a:	25 83       	std	Z+5, r18	; 0x05
 78c:	36 83       	std	Z+6, r19	; 0x06
 78e:	47 83       	std	Z+7, r20	; 0x07
 790:	08 95       	ret

Disassembly of section .text.LM_matchMessage:

0000044a <LM_matchMessage>:
}

int LM_matchMessage(LM_STATE_DATA *sd, char *msg){
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	ec 01       	movw	r28, r24
 450:	fb 01       	movw	r30, r22
	switch(sd->matchCase){
 452:	9c 81       	ldd	r25, Y+4	; 0x04
 454:	91 30       	cpi	r25, 0x01	; 1
 456:	91 f0       	breq	.+36     	; 0x47c <LM_matchMessage+0x32>
 458:	18 f0       	brcs	.+6      	; 0x460 <LM_matchMessage+0x16>
 45a:	92 30       	cpi	r25, 0x02	; 2
 45c:	e9 f0       	breq	.+58     	; 0x498 <LM_matchMessage+0x4e>
 45e:	1f c0       	rjmp	.+62     	; 0x49e <LM_matchMessage+0x54>
		case LM_EXACT:
			return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
 460:	2d 81       	ldd	r18, Y+5	; 0x05
 462:	3e 81       	ldd	r19, Y+6	; 0x06
 464:	4f 81       	ldd	r20, Y+7	; 0x07
 466:	80 e8       	ldi	r24, 0x80	; 128
 468:	0e 94 c0 02 	call	0x580	; 0x580 <strcmp>
 46c:	89 2b       	or	r24, r25
 46e:	19 f4       	brne	.+6      	; 0x476 <LM_matchMessage+0x2c>
 470:	88 81       	ld	r24, Y
 472:	99 81       	ldd	r25, Y+1	; 0x01
 474:	16 c0       	rjmp	.+44     	; 0x4a2 <LM_matchMessage+0x58>
 476:	8a 81       	ldd	r24, Y+2	; 0x02
 478:	9b 81       	ldd	r25, Y+3	; 0x03
 47a:	13 c0       	rjmp	.+38     	; 0x4a2 <LM_matchMessage+0x58>

		case LM_BEGINS_WITH:
			return LM_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
 47c:	4d 81       	ldd	r20, Y+5	; 0x05
 47e:	5e 81       	ldd	r21, Y+6	; 0x06
 480:	6f 81       	ldd	r22, Y+7	; 0x07
 482:	cf 01       	movw	r24, r30
 484:	0e 94 9e 02 	call	0x53c	; 0x53c <LM_strbeginswith>
 488:	88 23       	and	r24, r24
 48a:	19 f0       	breq	.+6      	; 0x492 <LM_matchMessage+0x48>
 48c:	88 81       	ld	r24, Y
 48e:	99 81       	ldd	r25, Y+1	; 0x01
 490:	08 c0       	rjmp	.+16     	; 0x4a2 <LM_matchMessage+0x58>
 492:	8a 81       	ldd	r24, Y+2	; 0x02
 494:	9b 81       	ldd	r25, Y+3	; 0x03
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <LM_matchMessage+0x58>

		case LM_NO_TEST:
			return sd->success_state;
 498:	88 81       	ld	r24, Y
 49a:	99 81       	ldd	r25, Y+1	; 0x01
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <LM_matchMessage+0x58>
		default:
			return sd->failure_state;
 49e:	8a 81       	ldd	r24, Y+2	; 0x02
 4a0:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

Disassembly of section .text.LM_transmit_msg:

00000736 <LM_transmit_msg>:

void LM_transmit_msg(char msg[]){
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	ec 01       	movw	r28, r24
	uart0_hal_send_message(msg, strlen(msg));
 73c:	bc 01       	movw	r22, r24
 73e:	80 e8       	ldi	r24, 0x80	; 128
 740:	0e 94 62 03 	call	0x6c4	; 0x6c4 <strlen>
 744:	bc 01       	movw	r22, r24
 746:	ce 01       	movw	r24, r28
 748:	0e 94 ff 02 	call	0x5fe	; 0x5fe <uart0_hal_send_message>
}
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	08 95       	ret

Disassembly of section .text.LM_read_msg:

000007ba <LM_read_msg>:

void LM_read_msg(char msg[]){
	uart0_hal_read_message_as_str(msg);
 7ba:	0e 94 78 03 	call	0x6f0	; 0x6f0 <uart0_hal_read_message_as_str>
 7be:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00000632 <cmd_with_ending>:
void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
 638:	0e 94 8c 03 	call	0x718	; 0x718 <strcpy>
	strcat(buffer, CMD_END_CHARS);
 63c:	fe 01       	movw	r30, r28
 63e:	01 90       	ld	r0, Z+
 640:	00 20       	and	r0, r0
 642:	e9 f7       	brne	.-6      	; 0x63e <cmd_with_ending+0xc>
 644:	cf 01       	movw	r24, r30
 646:	23 e0       	ldi	r18, 0x03	; 3
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	43 e1       	ldi	r20, 0x13	; 19
 64c:	51 e0       	ldi	r21, 0x01	; 1
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	0e 94 32 03 	call	0x664	; 0x664 <memcpy>
	return strlen(buffer);
 656:	be 01       	movw	r22, r28
 658:	80 e8       	ldi	r24, 0x80	; 128
 65a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <strlen>
}
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	08 95       	ret

Disassembly of section .text.test_lora_module_start:

000003e4 <test_lora_module_start>:
#include "../../MODULES/lora_module/join_network/join_network.h"
#include "../../MODULES/lora_module/lora_module.h"
#include "../../HAL/RN2483/RN2483_HAL.h"


void test_lora_module_start(){
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <test_lora_module_start+0x6>
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <test_lora_module_start+0x8>
 3ec:	1f 92       	push	r1
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
	
	uart0_hal_init();
 3f2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <uart0_hal_init>
	rn2483_init();
 3f6:	0e 94 ce 03 	call	0x79c	; 0x79c <rn2483_init>
	
	while(1){
		LM_STATUS status=LM_join_network();
 3fa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LM_join_network>
		if(status==LM_STATUS_SUCCESS){
 3fe:	81 11       	cpse	r24, r1
 400:	0b c0       	rjmp	.+22     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			char msg[]="OK";
 402:	8f e4       	ldi	r24, 0x4F	; 79
 404:	9b e4       	ldi	r25, 0x4B	; 75
 406:	9a 83       	std	Y+2, r25	; 0x02
 408:	89 83       	std	Y+1, r24	; 0x01
 40a:	1b 82       	std	Y+3, r1	; 0x03
			uart0_hal_send_message((uint8_t*)msg, 3);
 40c:	63 e0       	ldi	r22, 0x03	; 3
 40e:	ce 01       	movw	r24, r28
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	0e 94 ff 02 	call	0x5fe	; 0x5fe <uart0_hal_send_message>
 416:	0f c0       	rjmp	.+30     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		}else{
			char msg[]="FAIL";
 418:	25 ea       	ldi	r18, 0xA5	; 165
 41a:	31 e0       	ldi	r19, 0x01	; 1
 41c:	40 e0       	ldi	r20, 0x00	; 0
 41e:	85 e0       	ldi	r24, 0x05	; 5
 420:	f9 01       	movw	r30, r18
 422:	de 01       	movw	r26, r28
 424:	11 96       	adiw	r26, 0x01	; 1
 426:	74 2f       	mov	r23, r20
 428:	0e 94 a9 03 	call	0x752	; 0x752 <__movmemx_qi>
			uart0_hal_send_message((uint8_t*)msg, 5);
 42c:	65 e0       	ldi	r22, 0x05	; 5
 42e:	ce 01       	movw	r24, r28
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	0e 94 ff 02 	call	0x5fe	; 0x5fe <uart0_hal_send_message>
 436:	2f ef       	ldi	r18, 0xFF	; 255
 438:	8d e3       	ldi	r24, 0x3D	; 61
 43a:	99 e4       	ldi	r25, 0x49	; 73
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 446:	00 00       	nop
 448:	d8 cf       	rjmp	.-80     	; 0x3fa <test_lora_module_start+0x16>

Disassembly of section .text.libgcc:

00000752 <__movmemx_qi>:
 752:	99 27       	eor	r25, r25

00000754 <__movmemx_hi>:
 754:	77 fd       	sbrc	r23, 7
 756:	05 c0       	rjmp	.+10     	; 0x762 <__movmemx_hi+0xe>
 758:	05 90       	lpm	r0, Z+
 75a:	0d 92       	st	X+, r0
 75c:	01 97       	sbiw	r24, 0x01	; 1
 75e:	e1 f7       	brne	.-8      	; 0x758 <__movmemx_hi+0x4>
 760:	08 95       	ret
 762:	01 90       	ld	r0, Z+
 764:	0d 92       	st	X+, r0
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	e1 f7       	brne	.-8      	; 0x762 <__movmemx_hi+0xe>
 76a:	08 95       	ret

Disassembly of section .text.avrlibc:

00000664 <memcpy>:
 664:	cf 92       	push	r12
 666:	df 92       	push	r13
 668:	ef 92       	push	r14
 66a:	dc 01       	movw	r26, r24
 66c:	6a 01       	movw	r12, r20
 66e:	e6 2e       	mov	r14, r22
 670:	28 0f       	add	r18, r24
 672:	39 1f       	adc	r19, r25
 674:	a2 17       	cp	r26, r18
 676:	b3 07       	cpc	r27, r19
 678:	51 f0       	breq	.+20     	; 0x68e <memcpy+0x2a>
 67a:	f6 01       	movw	r30, r12
 67c:	44 91       	lpm	r20, Z
 67e:	e7 fc       	sbrc	r14, 7
 680:	40 81       	ld	r20, Z
 682:	4d 93       	st	X+, r20
 684:	4f ef       	ldi	r20, 0xFF	; 255
 686:	c4 1a       	sub	r12, r20
 688:	d4 0a       	sbc	r13, r20
 68a:	e4 0a       	sbc	r14, r20
 68c:	f3 cf       	rjmp	.-26     	; 0x674 <memcpy+0x10>
 68e:	ef 90       	pop	r14
 690:	df 90       	pop	r13
 692:	cf 90       	pop	r12
 694:	08 95       	ret

Disassembly of section .text.avrlibc:

00000580 <strcmp>:
 580:	cf 92       	push	r12
 582:	df 92       	push	r13
 584:	ef 92       	push	r14
 586:	6b 01       	movw	r12, r22
 588:	e8 2e       	mov	r14, r24
 58a:	f6 01       	movw	r30, r12
 58c:	84 91       	lpm	r24, Z
 58e:	e7 fc       	sbrc	r14, 7
 590:	80 81       	ld	r24, Z
 592:	f9 01       	movw	r30, r18
 594:	54 91       	lpm	r21, Z
 596:	47 fd       	sbrc	r20, 7
 598:	50 81       	ld	r21, Z
 59a:	85 13       	cpse	r24, r21
 59c:	0b c0       	rjmp	.+22     	; 0x5b4 <strcmp+0x34>
 59e:	88 23       	and	r24, r24
 5a0:	41 f0       	breq	.+16     	; 0x5b2 <strcmp+0x32>
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	c8 1a       	sub	r12, r24
 5a6:	d8 0a       	sbc	r13, r24
 5a8:	e8 0a       	sbc	r14, r24
 5aa:	2f 5f       	subi	r18, 0xFF	; 255
 5ac:	3f 4f       	sbci	r19, 0xFF	; 255
 5ae:	4f 4f       	sbci	r20, 0xFF	; 255
 5b0:	ec cf       	rjmp	.-40     	; 0x58a <strcmp+0xa>
 5b2:	58 2f       	mov	r21, r24
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	85 1b       	sub	r24, r21
 5b8:	91 09       	sbc	r25, r1
 5ba:	ef 90       	pop	r14
 5bc:	df 90       	pop	r13
 5be:	cf 90       	pop	r12
 5c0:	08 95       	ret

Disassembly of section .text.avrlibc:

0000037a <strncmp>:
 37a:	cf 92       	push	r12
 37c:	df 92       	push	r13
 37e:	ef 92       	push	r14
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	6b 01       	movw	r12, r22
 386:	e8 2e       	mov	r14, r24
 388:	01 15       	cp	r16, r1
 38a:	11 05       	cpc	r17, r1
 38c:	19 f1       	breq	.+70     	; 0x3d4 <strncmp+0x5a>
 38e:	01 50       	subi	r16, 0x01	; 1
 390:	11 09       	sbc	r17, r1
 392:	f6 01       	movw	r30, r12
 394:	84 91       	lpm	r24, Z
 396:	e7 fc       	sbrc	r14, 7
 398:	80 81       	ld	r24, Z
 39a:	88 23       	and	r24, r24
 39c:	99 f0       	breq	.+38     	; 0x3c4 <strncmp+0x4a>
 39e:	f9 01       	movw	r30, r18
 3a0:	94 91       	lpm	r25, Z
 3a2:	47 fd       	sbrc	r20, 7
 3a4:	90 81       	ld	r25, Z
 3a6:	99 23       	and	r25, r25
 3a8:	69 f0       	breq	.+26     	; 0x3c4 <strncmp+0x4a>
 3aa:	01 15       	cp	r16, r1
 3ac:	11 05       	cpc	r17, r1
 3ae:	51 f0       	breq	.+20     	; 0x3c4 <strncmp+0x4a>
 3b0:	89 13       	cpse	r24, r25
 3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <strncmp+0x4a>
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	c8 1a       	sub	r12, r24
 3b8:	d8 0a       	sbc	r13, r24
 3ba:	e8 0a       	sbc	r14, r24
 3bc:	2f 5f       	subi	r18, 0xFF	; 255
 3be:	3f 4f       	sbci	r19, 0xFF	; 255
 3c0:	4f 4f       	sbci	r20, 0xFF	; 255
 3c2:	e5 cf       	rjmp	.-54     	; 0x38e <strncmp+0x14>
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	f9 01       	movw	r30, r18
 3c8:	24 91       	lpm	r18, Z
 3ca:	47 fd       	sbrc	r20, 7
 3cc:	20 81       	ld	r18, Z
 3ce:	82 1b       	sub	r24, r18
 3d0:	91 09       	sbc	r25, r1
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <strncmp+0x5e>
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ef 90       	pop	r14
 3de:	df 90       	pop	r13
 3e0:	cf 90       	pop	r12
 3e2:	08 95       	ret

Disassembly of section .text.avrlibc:

000006c4 <strlen>:
 6c4:	cf 92       	push	r12
 6c6:	df 92       	push	r13
 6c8:	ef 92       	push	r14
 6ca:	6b 01       	movw	r12, r22
 6cc:	e8 2e       	mov	r14, r24
 6ce:	a8 2f       	mov	r26, r24
 6d0:	cb 01       	movw	r24, r22
 6d2:	fc 01       	movw	r30, r24
 6d4:	24 91       	lpm	r18, Z
 6d6:	a7 fd       	sbrc	r26, 7
 6d8:	20 81       	ld	r18, Z
 6da:	22 23       	and	r18, r18
 6dc:	19 f0       	breq	.+6      	; 0x6e4 <strlen+0x20>
 6de:	01 96       	adiw	r24, 0x01	; 1
 6e0:	a1 1d       	adc	r26, r1
 6e2:	f7 cf       	rjmp	.-18     	; 0x6d2 <strlen+0xe>
 6e4:	8c 19       	sub	r24, r12
 6e6:	9d 09       	sbc	r25, r13
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	cf 90       	pop	r12
 6ee:	08 95       	ret

Disassembly of section .text.avrlibc:

00000718 <strcpy>:
 718:	9a 01       	movw	r18, r20
 71a:	46 2f       	mov	r20, r22
 71c:	dc 01       	movw	r26, r24
 71e:	f9 01       	movw	r30, r18
 720:	54 91       	lpm	r21, Z
 722:	47 fd       	sbrc	r20, 7
 724:	50 81       	ld	r21, Z
 726:	5d 93       	st	X+, r21
 728:	55 23       	and	r21, r21
 72a:	21 f0       	breq	.+8      	; 0x734 <strcpy+0x1c>
 72c:	2f 5f       	subi	r18, 0xFF	; 255
 72e:	3f 4f       	sbci	r19, 0xFF	; 255
 730:	4f 4f       	sbci	r20, 0xFF	; 255
 732:	f5 cf       	rjmp	.-22     	; 0x71e <strcpy+0x6>
 734:	08 95       	ret
