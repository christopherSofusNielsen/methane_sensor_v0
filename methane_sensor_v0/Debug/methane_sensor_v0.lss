
methane_sensor_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000510  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800100  00800100  00000510  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  0000056b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021e6  00000000  00000000  000006b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dcc  00000000  00000000  00002899  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009f0  00000000  00000000  00003665  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  00004058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036c  00000000  00000000  00004408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bbc  00000000  00000000  00004774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00005330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000478  00000478  0000050c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005428  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.uart0_hal_init 0000003c  00000354  00000354  000003e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.uart0_hal_send_message 00000034  00000390  00000390  00000424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_20 0000004a  0000027a  0000027a  0000030e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_18 00000070  0000019a  0000019a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.rx_buffer_has_message 00000001  00800358  00800358  00000510  2**0
                  ALLOC
 19 .bss.rx_buffer_data_len 00000001  00800359  00800359  00000510  2**0
                  ALLOC
 20 .bss.tx_buffer_cursor 00000001  0080035a  0080035a  00000510  2**0
                  ALLOC
 21 .bss.tx_buffer_data_len 00000001  0080035b  0080035b  00000510  2**0
                  ALLOC
 22 .text.__vector_30 0000004a  000002c4  000002c4  00000358  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_28 00000070  0000020a  0000020a  0000029e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.rx_buffer_has_message 00000001  0080035c  0080035c  00000510  2**0
                  ALLOC
 25 .bss.rx_buffer_data_len 00000001  0080035d  0080035d  00000510  2**0
                  ALLOC
 26 .bss.rx_buffer 00000064  008002f4  008002f4  00000510  2**0
                  ALLOC
 27 .bss.tx_buffer_cursor 00000001  0080035e  0080035e  00000510  2**0
                  ALLOC
 28 .bss.tx_buffer_data_len 00000001  0080035f  0080035f  00000510  2**0
                  ALLOC
 29 .bss.tx_buffer 000000c8  0080022c  0080022c  00000510  2**0
                  ALLOC
 30 .text.main    00000006  00000472  00000472  00000506  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .progmemx.data 0000007f  0000010e  0000010e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 32 .text.cmd_with_ending 00000032  000003c4  000003c4  00000458  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data 0000000c  0000018d  0000018d  00000221  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .text.test_lora_module_start 00000046  0000030e  0000030e  000003a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.avrlibc 00000032  000003f6  000003f6  0000048a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc 0000002c  00000428  00000428  000004bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc 0000001e  00000454  00000454  000004e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
   8:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
   c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  10:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  14:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  18:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  1c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  20:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  24:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  28:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  2c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  30:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  34:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  38:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  3c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  40:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  44:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_18>
  4c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  50:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_20>
  54:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  58:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  5c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  60:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  64:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  68:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  6c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  70:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_28>
  74:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  78:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_30>
  7c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  80:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  84:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  88:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  8c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  90:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  94:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  98:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  9c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  a0:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  a4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  a8:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  ac:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
  b0:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>

000000b4 <.dinit>:
  b4:	01 00       	.word	0x0001	; ????
  b6:	03 60       	ori	r16, 0x03	; 3
  b8:	80 00       	.word	0x0080	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	e4 eb       	ldi	r30, 0xB4	; 180
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	17 c0       	rjmp	.+46     	; 0xfc <__do_clear_bss+0x8>
  ce:	b5 91       	lpm	r27, Z+
  d0:	a5 91       	lpm	r26, Z+
  d2:	35 91       	lpm	r19, Z+
  d4:	25 91       	lpm	r18, Z+
  d6:	05 91       	lpm	r16, Z+
  d8:	07 fd       	sbrc	r16, 7
  da:	0c c0       	rjmp	.+24     	; 0xf4 <__do_clear_bss>
  dc:	95 91       	lpm	r25, Z+
  de:	85 91       	lpm	r24, Z+
  e0:	ef 01       	movw	r28, r30
  e2:	f9 2f       	mov	r31, r25
  e4:	e8 2f       	mov	r30, r24
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0x20>
  f0:	fe 01       	movw	r30, r28
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_clear_bss+0x8>

000000f4 <__do_clear_bss>:
  f4:	1d 92       	st	X+, r1
  f6:	a2 17       	cp	r26, r18
  f8:	b3 07       	cpc	r27, r19
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__do_clear_bss>
  fc:	e9 3b       	cpi	r30, 0xB9	; 185
  fe:	f4 07       	cpc	r31, r20
 100:	31 f7       	brne	.-52     	; 0xce <__do_copy_data+0x8>
 102:	0e 94 39 02 	call	0x472	; 0x472 <main>
 106:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>

Disassembly of section .text:

00000478 <__bad_interrupt>:
 478:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.uart0_hal_init:

00000354 <uart0_hal_init>:
uint8_t rx_buffer[UART0_RX_BUFF_LENGTH];
uint8_t rx_buffer_data_len=0;
uint8_t rx_buffer_has_message=0;

void uart0_hal_init(){
	set_bit(UCSR0B, 4); //Enable Rx
 354:	e1 ec       	ldi	r30, 0xC1	; 193
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	80 61       	ori	r24, 0x10	; 16
 35c:	80 83       	st	Z, r24
	set_bit(UCSR0B, 3); //Enable Tx
 35e:	80 81       	ld	r24, Z
 360:	88 60       	ori	r24, 0x08	; 8
 362:	80 83       	st	Z, r24
	set_bit(UCSR0B, 7); //interrupt Rx complete
 364:	80 81       	ld	r24, Z
 366:	80 68       	ori	r24, 0x80	; 128
 368:	80 83       	st	Z, r24
	set_bit(UCSR0B, 6); //interrupt Tx complete
 36a:	80 81       	ld	r24, Z
 36c:	80 64       	ori	r24, 0x40	; 64
 36e:	80 83       	st	Z, r24
	set_bit(UCSR0A, 1); //Set double speed
 370:	e0 ec       	ldi	r30, 0xC0	; 192
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	82 60       	ori	r24, 0x02	; 2
 378:	80 83       	st	Z, r24
	UCSR0C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
 37a:	86 e0       	ldi	r24, 0x06	; 6
 37c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0=(8000000/(8*57600))-1; //set baudrate
 380:	80 e1       	ldi	r24, 0x10	; 16
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 388:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	sei();
 38c:	78 94       	sei
 38e:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00000390 <uart0_hal_send_message>:
}


void uart0_hal_send_message(uint8_t msg[], uint8_t length){
 390:	dc 01       	movw	r26, r24
	for (uint8_t i=0; i<length; i++)
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0b c0       	rjmp	.+22     	; 0x3ac <uart0_hal_send_message+0x1c>
	{
		tx_buffer[i]=msg[i];
 396:	29 2f       	mov	r18, r25
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	fd 01       	movw	r30, r26
 39c:	e2 0f       	add	r30, r18
 39e:	f3 1f       	adc	r31, r19
 3a0:	40 81       	ld	r20, Z
 3a2:	f9 01       	movw	r30, r18
 3a4:	ec 59       	subi	r30, 0x9C	; 156
 3a6:	fe 4f       	sbci	r31, 0xFE	; 254
 3a8:	40 83       	st	Z, r20
	sei();
}


void uart0_hal_send_message(uint8_t msg[], uint8_t length){
	for (uint8_t i=0; i<length; i++)
 3aa:	9f 5f       	subi	r25, 0xFF	; 255
 3ac:	96 17       	cp	r25, r22
 3ae:	98 f3       	brcs	.-26     	; 0x396 <uart0_hal_send_message+0x6>
	{
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
 3b0:	60 93 5b 03 	sts	0x035B, r22	; 0x80035b <tx_buffer_data_len>
	tx_buffer_cursor=1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <tx_buffer_cursor>
	UDR0=tx_buffer[0];
 3ba:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
 3be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3c2:	08 95       	ret

Disassembly of section .text.__vector_20:

0000027a <__vector_20>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART0_TX_vect){
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	8f 93       	push	r24
 286:	ef 93       	push	r30
 288:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 28a:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <tx_buffer_cursor>
 28e:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <tx_buffer_data_len>
 292:	e8 17       	cp	r30, r24
 294:	58 f4       	brcc	.+22     	; 0x2ac <__vector_20+0x32>
		UDR0=tx_buffer[tx_buffer_cursor++];
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	8e 0f       	add	r24, r30
 29a:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <tx_buffer_cursor>
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	ec 59       	subi	r30, 0x9C	; 156
 2a2:	fe 4f       	sbci	r31, 0xFE	; 254
 2a4:	80 81       	ld	r24, Z
 2a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <__vector_20+0x3a>
	}else{
		tx_buffer_cursor=0;
 2ac:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <tx_buffer_cursor>
		tx_buffer_data_len=0;
 2b0:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <tx_buffer_data_len>
	}
}
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	8f 91       	pop	r24
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

Disassembly of section .text.__vector_18:

0000019a <__vector_18>:
	{
		msg[i]=rx_buffer[i];
	}
	uart0_hal_clear_rx_buffer();
	return rx_buffer_data_len-2;
}
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
 1ae:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <rx_buffer_has_message>
 1b2:	81 11       	cpse	r24, r1
 1b4:	0e c0       	rjmp	.+28     	; 0x1d2 <__vector_18+0x38>
 1b6:	e0 91 59 03 	lds	r30, 0x0359	; 0x800359 <rx_buffer_data_len>
 1ba:	e4 36       	cpi	r30, 0x64	; 100
 1bc:	50 f4       	brcc	.+20     	; 0x1d2 <__vector_18+0x38>
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	8e 0f       	add	r24, r30
 1c2:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <rx_buffer_data_len>
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1cc:	e0 50       	subi	r30, 0x00	; 0
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	80 83       	st	Z, r24
 1d2:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <rx_buffer_data_len>
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	fc 01       	movw	r30, r24
 1da:	e1 50       	subi	r30, 0x01	; 1
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	20 81       	ld	r18, Z
 1e0:	2d 30       	cpi	r18, 0x0D	; 13
 1e2:	49 f4       	brne	.+18     	; 0x1f6 <__vector_18+0x5c>
 1e4:	fc 01       	movw	r30, r24
 1e6:	e2 50       	subi	r30, 0x02	; 2
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	80 81       	ld	r24, Z
 1ec:	8a 30       	cpi	r24, 0x0A	; 10
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <__vector_18+0x5c>
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <rx_buffer_has_message>
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

Disassembly of section .text.__vector_30:

000002c4 <__vector_30>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART1_TX_vect){
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	8f 93       	push	r24
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 2d4:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <tx_buffer_cursor>
 2d8:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <tx_buffer_data_len>
 2dc:	e8 17       	cp	r30, r24
 2de:	58 f4       	brcc	.+22     	; 0x2f6 <__vector_30+0x32>
		UDR1=tx_buffer[tx_buffer_cursor++];
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	8e 0f       	add	r24, r30
 2e4:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <tx_buffer_cursor>
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	e4 5d       	subi	r30, 0xD4	; 212
 2ec:	fd 4f       	sbci	r31, 0xFD	; 253
 2ee:	80 81       	ld	r24, Z
 2f0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__vector_30+0x3a>
		}else{
		tx_buffer_cursor=0;
 2f6:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <tx_buffer_cursor>
		tx_buffer_data_len=0;
 2fa:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <tx_buffer_data_len>
	}
}
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	8f 91       	pop	r24
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

Disassembly of section .text.__vector_28:

0000020a <__vector_28>:
	{
		msg[i]=rx_buffer[i];
	}
	uart1_hal_clear_rx_buffer();
	return rx_buffer_data_len-2;
}
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	2f 93       	push	r18
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
 21e:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <rx_buffer_has_message>
 222:	81 11       	cpse	r24, r1
 224:	0e c0       	rjmp	.+28     	; 0x242 <__vector_28+0x38>
 226:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <rx_buffer_data_len>
 22a:	e4 36       	cpi	r30, 0x64	; 100
 22c:	50 f4       	brcc	.+20     	; 0x242 <__vector_28+0x38>
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	8e 0f       	add	r24, r30
 232:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <rx_buffer_data_len>
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 23c:	ec 50       	subi	r30, 0x0C	; 12
 23e:	fd 4f       	sbci	r31, 0xFD	; 253
 240:	80 83       	st	Z, r24
 242:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <rx_buffer_data_len>
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	ed 50       	subi	r30, 0x0D	; 13
 24c:	fd 4f       	sbci	r31, 0xFD	; 253
 24e:	20 81       	ld	r18, Z
 250:	2d 30       	cpi	r18, 0x0D	; 13
 252:	49 f4       	brne	.+18     	; 0x266 <__vector_28+0x5c>
 254:	fc 01       	movw	r30, r24
 256:	ee 50       	subi	r30, 0x0E	; 14
 258:	fd 4f       	sbci	r31, 0xFD	; 253
 25a:	80 81       	ld	r24, Z
 25c:	8a 30       	cpi	r24, 0x0A	; 10
 25e:	19 f4       	brne	.+6      	; 0x266 <__vector_28+0x5c>
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <rx_buffer_has_message>
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	2f 91       	pop	r18
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

Disassembly of section .text.main:

00000472 <main>:
#include "TEST/lora-module/test_lora_module.h"


int main(void)
{
	test_lora_module_start();
 472:	0e 94 87 01 	call	0x30e	; 0x30e <test_lora_module_start>
 476:	ff cf       	rjmp	.-2      	; 0x476 <main+0x4>

Disassembly of section .text.cmd_with_ending:

000003c4 <cmd_with_ending>:
void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
 3ca:	0e 94 2a 02 	call	0x454	; 0x454 <strcpy>
	strcat(buffer, CMD_END_CHARS);
 3ce:	fe 01       	movw	r30, r28
 3d0:	01 90       	ld	r0, Z+
 3d2:	00 20       	and	r0, r0
 3d4:	e9 f7       	brne	.-6      	; 0x3d0 <cmd_with_ending+0xc>
 3d6:	cf 01       	movw	r24, r30
 3d8:	23 e0       	ldi	r18, 0x03	; 3
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	43 e1       	ldi	r20, 0x13	; 19
 3de:	51 e0       	ldi	r21, 0x01	; 1
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <memcpy>
	return strlen(buffer);
 3e8:	be 01       	movw	r22, r28
 3ea:	80 e8       	ldi	r24, 0x80	; 128
 3ec:	0e 94 14 02 	call	0x428	; 0x428 <strlen>
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

Disassembly of section .text.test_lora_module_start:

0000030e <test_lora_module_start>:
#include "../../HAL/UART1/UART1_HAL.h"
#include <util/delay.h>
#include "../../MODULES/lora_module/lora_module.h"
#include "../../MODULES/lora_module/RN2483_protocol/RN2483_protocol.h"

void test_lora_module_start(){
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	c8 5c       	subi	r28, 0xC8	; 200
 318:	d1 09       	sbc	r29, r1
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	f8 94       	cli
 31e:	de bf       	out	0x3e, r29	; 62
 320:	0f be       	out	0x3f, r0	; 63
 322:	cd bf       	out	0x3d, r28	; 61
	
	uart0_hal_init();
 324:	0e 94 aa 01 	call	0x354	; 0x354 <uart0_hal_init>
	
	while(1){
		const char msg[200];
		int16_t len=cmd_with_ending(msg, SYS_GET_VERSION_CMD);
 328:	4d e8       	ldi	r20, 0x8D	; 141
 32a:	51 e0       	ldi	r21, 0x01	; 1
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	ce 01       	movw	r24, r28
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cmd_with_ending>
		
		uart0_hal_send_message((uint8_t *) msg, len);
 336:	68 2f       	mov	r22, r24
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	0e 94 c8 01 	call	0x390	; 0x390 <uart0_hal_send_message>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	89 e6       	ldi	r24, 0x69	; 105
 344:	98 e1       	ldi	r25, 0x18	; 24
 346:	21 50       	subi	r18, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <test_lora_module_start+0x38>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <test_lora_module_start+0x42>
 350:	00 00       	nop
 352:	ea cf       	rjmp	.-44     	; 0x328 <test_lora_module_start+0x1a>

Disassembly of section .text.avrlibc:

000003f6 <memcpy>:
 3f6:	cf 92       	push	r12
 3f8:	df 92       	push	r13
 3fa:	ef 92       	push	r14
 3fc:	dc 01       	movw	r26, r24
 3fe:	6a 01       	movw	r12, r20
 400:	e6 2e       	mov	r14, r22
 402:	28 0f       	add	r18, r24
 404:	39 1f       	adc	r19, r25
 406:	a2 17       	cp	r26, r18
 408:	b3 07       	cpc	r27, r19
 40a:	51 f0       	breq	.+20     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 40c:	f6 01       	movw	r30, r12
 40e:	44 91       	lpm	r20, Z
 410:	e7 fc       	sbrc	r14, 7
 412:	40 81       	ld	r20, Z
 414:	4d 93       	st	X+, r20
 416:	4f ef       	ldi	r20, 0xFF	; 255
 418:	c4 1a       	sub	r12, r20
 41a:	d4 0a       	sbc	r13, r20
 41c:	e4 0a       	sbc	r14, r20
 41e:	f3 cf       	rjmp	.-26     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 420:	ef 90       	pop	r14
 422:	df 90       	pop	r13
 424:	cf 90       	pop	r12
 426:	08 95       	ret

Disassembly of section .text.avrlibc:

00000428 <strlen>:
 428:	cf 92       	push	r12
 42a:	df 92       	push	r13
 42c:	ef 92       	push	r14
 42e:	6b 01       	movw	r12, r22
 430:	e8 2e       	mov	r14, r24
 432:	a8 2f       	mov	r26, r24
 434:	cb 01       	movw	r24, r22
 436:	fc 01       	movw	r30, r24
 438:	24 91       	lpm	r18, Z
 43a:	a7 fd       	sbrc	r26, 7
 43c:	20 81       	ld	r18, Z
 43e:	22 23       	and	r18, r18
 440:	19 f0       	breq	.+6      	; 0x448 <strlen+0x20>
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	a1 1d       	adc	r26, r1
 446:	f7 cf       	rjmp	.-18     	; 0x436 <strlen+0xe>
 448:	8c 19       	sub	r24, r12
 44a:	9d 09       	sbc	r25, r13
 44c:	ef 90       	pop	r14
 44e:	df 90       	pop	r13
 450:	cf 90       	pop	r12
 452:	08 95       	ret

Disassembly of section .text.avrlibc:

00000454 <strcpy>:
 454:	9a 01       	movw	r18, r20
 456:	46 2f       	mov	r20, r22
 458:	dc 01       	movw	r26, r24
 45a:	f9 01       	movw	r30, r18
 45c:	54 91       	lpm	r21, Z
 45e:	47 fd       	sbrc	r20, 7
 460:	50 81       	ld	r21, Z
 462:	5d 93       	st	X+, r21
 464:	55 23       	and	r21, r21
 466:	21 f0       	breq	.+8      	; 0x470 <strcpy+0x1c>
 468:	2f 5f       	subi	r18, 0xFF	; 255
 46a:	3f 4f       	sbci	r19, 0xFF	; 255
 46c:	4f 4f       	sbci	r20, 0xFF	; 255
 46e:	f5 cf       	rjmp	.-22     	; 0x45a <strcpy+0x6>
 470:	08 95       	ret
