
methane_sensor_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000056c  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f4  00800100  00800100  0000056c  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000208  00000000  00000000  000005c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000331b  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010b1  00000000  00000000  00003aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001088  00000000  00000000  00004b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000454  00000000  00000000  00005c24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000490  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009c3  00000000  00000000  00006508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00006ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004f4  000004f4  00000568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007054  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.rn2483_init 00000008  000004da  000004da  0000054e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.copy_buffer 0000002e  00000432  00000432  000004a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.uart0_hal_init 0000003c  00000390  00000390  00000404  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.uart0_hal_send_message 00000034  000003cc  000003cc  00000440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.uart0_hal_message_ready 0000000e  000004c2  000004c2  00000536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.uart0_hal_clear_rx_buffer 0000000a  000004d0  000004d0  00000544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.uart0_hal_read_message_as_str 00000028  00000460  00000460  000004d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.uart0_hal_send_break 00000046  00000308  00000308  0000037c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_20 0000004a  00000274  00000274  000002e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_18 00000074  00000190  00000190  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.rx_buffer_has_message 00000001  00800420  00800420  0000056c  2**0
                  ALLOC
 25 .bss.rx_buffer_data_len 00000001  00800421  00800421  0000056c  2**0
                  ALLOC
 26 .bss.tx_buffer_cursor 00000001  00800422  00800422  0000056c  2**0
                  ALLOC
 27 .bss.tx_buffer_data_len 00000001  00800423  00800423  0000056c  2**0
                  ALLOC
 28 .text.__vector_30 0000004a  000002be  000002be  00000332  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_28 00000070  00000204  00000204  00000278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss.rx_buffer_has_message 00000001  00800424  00800424  0000056c  2**0
                  ALLOC
 31 .bss.rx_buffer_data_len 00000001  00800425  00800425  0000056c  2**0
                  ALLOC
 32 .bss.rx_buffer 00000064  008003bc  008003bc  0000056c  2**0
                  ALLOC
 33 .bss.tx_buffer_cursor 00000001  00800426  00800426  0000056c  2**0
                  ALLOC
 34 .bss.tx_buffer_data_len 00000001  00800427  00800427  0000056c  2**0
                  ALLOC
 35 .bss.tx_buffer 000000c8  008002f4  008002f4  0000056c  2**0
                  ALLOC
 36 .text.main    00000006  000004e2  000004e2  00000556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.LM_wake_up 00000006  000004e8  000004e8  0000055c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .progmemx.data 00000003  00000113  00000113  00000187  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .text.SC_wake_up 00000032  00000400  00000400  00000474  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.util_read_msg 00000006  000004ee  000004ee  00000562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .progmemx.data 00000005  0000010e  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .text.test_wake_up 0000007a  00000116  00000116  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.test_lora_module_start 00000020  00000488  00000488  000004fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.libgcc  0000001a  000004a8  000004a8  0000051c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.avrlibc 00000042  0000034e  0000034e  000003c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
   8:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
   c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  10:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  14:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  18:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  1c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  20:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  24:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  28:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  2c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  30:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  34:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  38:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  3c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  40:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  44:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_18>
  4c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  50:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_20>
  54:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  58:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  5c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  60:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  64:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  68:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  6c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  70:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_28>
  74:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  78:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_30>
  7c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  80:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  84:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  88:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  8c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  90:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  94:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  98:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  9c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  a0:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  a4:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  a8:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  ac:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>
  b0:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__bad_interrupt>

000000b4 <.dinit>:
  b4:	01 00       	.word	0x0001	; ????
  b6:	04 28       	or	r0, r4
  b8:	80 00       	.word	0x0080	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	e4 eb       	ldi	r30, 0xB4	; 180
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	17 c0       	rjmp	.+46     	; 0xfc <__do_clear_bss+0x8>
  ce:	b5 91       	lpm	r27, Z+
  d0:	a5 91       	lpm	r26, Z+
  d2:	35 91       	lpm	r19, Z+
  d4:	25 91       	lpm	r18, Z+
  d6:	05 91       	lpm	r16, Z+
  d8:	07 fd       	sbrc	r16, 7
  da:	0c c0       	rjmp	.+24     	; 0xf4 <__do_clear_bss>
  dc:	95 91       	lpm	r25, Z+
  de:	85 91       	lpm	r24, Z+
  e0:	ef 01       	movw	r28, r30
  e2:	f9 2f       	mov	r31, r25
  e4:	e8 2f       	mov	r30, r24
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0x20>
  f0:	fe 01       	movw	r30, r28
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_clear_bss+0x8>

000000f4 <__do_clear_bss>:
  f4:	1d 92       	st	X+, r1
  f6:	a2 17       	cp	r26, r18
  f8:	b3 07       	cpc	r27, r19
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__do_clear_bss>
  fc:	e9 3b       	cpi	r30, 0xB9	; 185
  fe:	f4 07       	cpc	r31, r20
 100:	31 f7       	brne	.-52     	; 0xce <__do_copy_data+0x8>
 102:	0e 94 71 02 	call	0x4e2	; 0x4e2 <main>
 106:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>

Disassembly of section .text:

000004f4 <__bad_interrupt>:
 4f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.rn2483_init:

000004da <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
 4da:	87 b1       	in	r24, 0x07	; 7
 4dc:	84 60       	ori	r24, 0x04	; 4
 4de:	87 b9       	out	0x07, r24	; 7
 4e0:	08 95       	ret

Disassembly of section .text.copy_buffer:

00000432 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
 432:	bc 01       	movw	r22, r24
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	09 c0       	rjmp	.+18     	; 0x44a <copy_buffer+0x18>
 438:	fb 01       	movw	r30, r22
 43a:	e9 0f       	add	r30, r25
 43c:	f1 1d       	adc	r31, r1
 43e:	da 01       	movw	r26, r20
 440:	a0 50       	subi	r26, 0x00	; 0
 442:	bf 4f       	sbci	r27, 0xFF	; 255
 444:	2c 91       	ld	r18, X
 446:	20 83       	st	Z, r18
 448:	9f 5f       	subi	r25, 0xFF	; 255
 44a:	49 2f       	mov	r20, r25
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	20 91 21 04 	lds	r18, 0x0421	; 0x800421 <rx_buffer_data_len>
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	22 50       	subi	r18, 0x02	; 2
 456:	31 09       	sbc	r19, r1
 458:	42 17       	cp	r20, r18
 45a:	53 07       	cpc	r21, r19
 45c:	6c f3       	brlt	.-38     	; 0x438 <copy_buffer+0x6>
 45e:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00000390 <uart0_hal_init>:
 390:	e1 ec       	ldi	r30, 0xC1	; 193
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	80 61       	ori	r24, 0x10	; 16
 398:	80 83       	st	Z, r24
 39a:	80 81       	ld	r24, Z
 39c:	88 60       	ori	r24, 0x08	; 8
 39e:	80 83       	st	Z, r24
 3a0:	80 81       	ld	r24, Z
 3a2:	80 68       	ori	r24, 0x80	; 128
 3a4:	80 83       	st	Z, r24
 3a6:	80 81       	ld	r24, Z
 3a8:	80 64       	ori	r24, 0x40	; 64
 3aa:	80 83       	st	Z, r24
 3ac:	e0 ec       	ldi	r30, 0xC0	; 192
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	82 60       	ori	r24, 0x02	; 2
 3b4:	80 83       	st	Z, r24
 3b6:	86 e0       	ldi	r24, 0x06	; 6
 3b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3bc:	80 e1       	ldi	r24, 0x10	; 16
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3c8:	78 94       	sei
 3ca:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000003cc <uart0_hal_send_message>:
 3cc:	dc 01       	movw	r26, r24
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0b c0       	rjmp	.+22     	; 0x3e8 <uart0_hal_send_message+0x1c>
 3d2:	29 2f       	mov	r18, r25
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	fd 01       	movw	r30, r26
 3d8:	e2 0f       	add	r30, r18
 3da:	f3 1f       	adc	r31, r19
 3dc:	40 81       	ld	r20, Z
 3de:	f9 01       	movw	r30, r18
 3e0:	ec 59       	subi	r30, 0x9C	; 156
 3e2:	fe 4f       	sbci	r31, 0xFE	; 254
 3e4:	40 83       	st	Z, r20
 3e6:	9f 5f       	subi	r25, 0xFF	; 255
 3e8:	96 17       	cp	r25, r22
 3ea:	98 f3       	brcs	.-26     	; 0x3d2 <uart0_hal_send_message+0x6>
 3ec:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <tx_buffer_data_len>
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <tx_buffer_cursor>
 3f6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
 3fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3fe:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

000004c2 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
 4c2:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <rx_buffer_has_message>
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	91 11       	cpse	r25, r1
 4ca:	01 c0       	rjmp	.+2      	; 0x4ce <uart0_hal_message_ready+0xc>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
}
 4ce:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

000004d0 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
 4d0:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <rx_buffer_has_message>
	rx_buffer_data_len=0;
 4d4:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <rx_buffer_data_len>
 4d8:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00000460 <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(uint8_t msg[]){
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	8c 01       	movw	r16, r24
	copy_buffer(msg);
 468:	0e 94 19 02 	call	0x432	; 0x432 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
 46c:	c0 91 21 04 	lds	r28, 0x0421	; 0x800421 <rx_buffer_data_len>
 470:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
 472:	f8 01       	movw	r30, r16
 474:	ec 0f       	add	r30, r28
 476:	f1 1d       	adc	r31, r1
 478:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
 47a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uart0_hal_clear_rx_buffer>
	return len;
}
 47e:	8c 2f       	mov	r24, r28
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00000308 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	1f 92       	push	r1
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	9a b1       	in	r25, 0x0a	; 10
 314:	92 60       	ori	r25, 0x02	; 2
 316:	9a b9       	out	0x0a, r25	; 10
 318:	e1 ec       	ldi	r30, 0xC1	; 193
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	90 81       	ld	r25, Z
 31e:	97 7f       	andi	r25, 0xF7	; 247
 320:	90 83       	st	Z, r25
 322:	9b b1       	in	r25, 0x0b	; 11
 324:	9d 7f       	andi	r25, 0xFD	; 253
 326:	9b b9       	out	0x0b, r25	; 11
 328:	a3 ef       	ldi	r26, 0xF3	; 243
 32a:	b1 e0       	ldi	r27, 0x01	; 1
 32c:	11 97       	sbiw	r26, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <uart0_hal_send_break+0x24>
 330:	00 c0       	rjmp	.+0      	; 0x332 <uart0_hal_send_break+0x2a>
 332:	00 00       	nop
 334:	90 81       	ld	r25, Z
 336:	98 60       	ori	r25, 0x08	; 8
 338:	90 83       	st	Z, r25
 33a:	89 83       	std	Y+1, r24	; 0x01
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	ce 01       	movw	r24, r28
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart0_hal_send_message>
 346:	0f 90       	pop	r0
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

Disassembly of section .text.__vector_20:

00000274 <__vector_20>:
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	8f 93       	push	r24
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
 284:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <tx_buffer_cursor>
 288:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <tx_buffer_data_len>
 28c:	e8 17       	cp	r30, r24
 28e:	58 f4       	brcc	.+22     	; 0x2a6 <__vector_20+0x32>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	8e 0f       	add	r24, r30
 294:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <tx_buffer_cursor>
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	ec 59       	subi	r30, 0x9C	; 156
 29c:	fe 4f       	sbci	r31, 0xFE	; 254
 29e:	80 81       	ld	r24, Z
 2a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <__vector_20+0x3a>
 2a6:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <tx_buffer_cursor>
 2aa:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <tx_buffer_data_len>
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	8f 91       	pop	r24
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

Disassembly of section .text.__vector_18:

00000190 <__vector_18>:
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
 1a4:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <rx_buffer_has_message>
 1a8:	81 11       	cpse	r24, r1
 1aa:	0e c0       	rjmp	.+28     	; 0x1c8 <__vector_18+0x38>
 1ac:	e0 91 21 04 	lds	r30, 0x0421	; 0x800421 <rx_buffer_data_len>
 1b0:	e4 36       	cpi	r30, 0x64	; 100
 1b2:	50 f4       	brcc	.+20     	; 0x1c8 <__vector_18+0x38>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	8e 0f       	add	r24, r30
 1b8:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <rx_buffer_data_len>
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 83       	st	Z, r24
 1c8:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <rx_buffer_data_len>
 1cc:	83 30       	cpi	r24, 0x03	; 3
 1ce:	80 f0       	brcs	.+32     	; 0x1f0 <__vector_18+0x60>
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	e1 50       	subi	r30, 0x01	; 1
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	20 81       	ld	r18, Z
 1da:	2a 30       	cpi	r18, 0x0A	; 10
 1dc:	49 f4       	brne	.+18     	; 0x1f0 <__vector_18+0x60>
 1de:	fc 01       	movw	r30, r24
 1e0:	e2 50       	subi	r30, 0x02	; 2
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	80 81       	ld	r24, Z
 1e6:	8d 30       	cpi	r24, 0x0D	; 13
 1e8:	19 f4       	brne	.+6      	; 0x1f0 <__vector_18+0x60>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <rx_buffer_has_message>
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

Disassembly of section .text.__vector_30:

000002be <__vector_30>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART1_TX_vect){
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	8f 93       	push	r24
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 2ce:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <tx_buffer_cursor>
 2d2:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <tx_buffer_data_len>
 2d6:	e8 17       	cp	r30, r24
 2d8:	58 f4       	brcc	.+22     	; 0x2f0 <__vector_30+0x32>
		UDR1=tx_buffer[tx_buffer_cursor++];
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	8e 0f       	add	r24, r30
 2de:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <tx_buffer_cursor>
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	ec 50       	subi	r30, 0x0C	; 12
 2e6:	fd 4f       	sbci	r31, 0xFD	; 253
 2e8:	80 81       	ld	r24, Z
 2ea:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <__vector_30+0x3a>
		}else{
		tx_buffer_cursor=0;
 2f0:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <tx_buffer_cursor>
		tx_buffer_data_len=0;
 2f4:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <tx_buffer_data_len>
	}
}
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	8f 91       	pop	r24
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

Disassembly of section .text.__vector_28:

00000204 <__vector_28>:
	{
		msg[i]=rx_buffer[i];
	}
	uart1_hal_clear_rx_buffer();
	return rx_buffer_data_len-2;
}
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
 218:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <rx_buffer_has_message>
 21c:	81 11       	cpse	r24, r1
 21e:	0e c0       	rjmp	.+28     	; 0x23c <__vector_28+0x38>
 220:	e0 91 25 04 	lds	r30, 0x0425	; 0x800425 <rx_buffer_data_len>
 224:	e4 36       	cpi	r30, 0x64	; 100
 226:	50 f4       	brcc	.+20     	; 0x23c <__vector_28+0x38>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	8e 0f       	add	r24, r30
 22c:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <rx_buffer_data_len>
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 236:	e4 54       	subi	r30, 0x44	; 68
 238:	fc 4f       	sbci	r31, 0xFC	; 252
 23a:	80 83       	st	Z, r24
 23c:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <rx_buffer_data_len>
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	fc 01       	movw	r30, r24
 244:	e5 54       	subi	r30, 0x45	; 69
 246:	fc 4f       	sbci	r31, 0xFC	; 252
 248:	20 81       	ld	r18, Z
 24a:	2d 30       	cpi	r18, 0x0D	; 13
 24c:	49 f4       	brne	.+18     	; 0x260 <__vector_28+0x5c>
 24e:	fc 01       	movw	r30, r24
 250:	e6 54       	subi	r30, 0x46	; 70
 252:	fc 4f       	sbci	r31, 0xFC	; 252
 254:	80 81       	ld	r24, Z
 256:	8a 30       	cpi	r24, 0x0A	; 10
 258:	19 f4       	brne	.+6      	; 0x260 <__vector_28+0x5c>
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <rx_buffer_has_message>
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

Disassembly of section .text.main:

000004e2 <main>:
#include "TEST/lora-module/test_lora_module.h"


int main(void)
{
	test_lora_module_start();
 4e2:	0e 94 44 02 	call	0x488	; 0x488 <test_lora_module_start>
 4e6:	ff cf       	rjmp	.-2      	; 0x4e6 <main+0x4>

Disassembly of section .text.LM_wake_up:

000004e8 <LM_wake_up>:
LM_STATUS LM_put_to_sleep(){
	return SC_put_to_sleep();
}

LM_STATUS LM_wake_up(){
	return SC_wake_up();
 4e8:	0e 94 00 02 	call	0x400	; 0x400 <__EEPROM_REGION_LENGTH__>
 4ec:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00000400 <SC_wake_up>:
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
	return LM_STATUS_ERROR;
}

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
 400:	85 e5       	ldi	r24, 0x55	; 85
 402:	0e 94 84 01 	call	0x308	; 0x308 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
 406:	0e 94 61 02 	call	0x4c2	; 0x4c2 <uart0_hal_message_ready>
 40a:	88 23       	and	r24, r24
 40c:	e1 f3       	breq	.-8      	; 0x406 <SC_wake_up+0x6>
	
	util_read_msg(lm_msg);
 40e:	8c e2       	ldi	r24, 0x2C	; 44
 410:	92 e0       	ldi	r25, 0x02	; 2
 412:	0e 94 77 02 	call	0x4ee	; 0x4ee <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
 416:	6c e2       	ldi	r22, 0x2C	; 44
 418:	72 e0       	ldi	r23, 0x02	; 2
 41a:	80 e8       	ldi	r24, 0x80	; 128
 41c:	23 e1       	ldi	r18, 0x13	; 19
 41e:	31 e0       	ldi	r19, 0x01	; 1
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	0e 94 a7 01 	call	0x34e	; 0x34e <strcmp>
 426:	89 2b       	or	r24, r25
 428:	11 f4       	brne	.+4      	; 0x42e <SC_wake_up+0x2e>
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret
	return LM_STATUS_ERROR;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	08 95       	ret

Disassembly of section .text.util_read_msg:

000004ee <util_read_msg>:
void util_transmit_msg(char msg[]){
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
}

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str((uint8_t*) msg);
 4ee:	0e 94 30 02 	call	0x460	; 0x460 <uart0_hal_read_message_as_str>
 4f2:	08 95       	ret

Disassembly of section .text.test_wake_up:

00000116 <test_wake_up>:
		test_wake_up();
		_delay_ms(3000);
	}
}

void test_wake_up(){
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	00 d0       	rcall	.+0      	; 0x11c <test_wake_up+0x6>
 11c:	00 d0       	rcall	.+0      	; 0x11e <test_wake_up+0x8>
 11e:	1f 92       	push	r1
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
	LM_STATUS status=LM_wake_up();
 124:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LM_wake_up>
	if(status==LM_STATUS_SUCCESS){
 128:	81 11       	cpse	r24, r1
 12a:	0b c0       	rjmp	.+22     	; 0x142 <test_wake_up+0x2c>
		char msg[]="OK";
 12c:	8f e4       	ldi	r24, 0x4F	; 79
 12e:	9b e4       	ldi	r25, 0x4B	; 75
 130:	9a 83       	std	Y+2, r25	; 0x02
 132:	89 83       	std	Y+1, r24	; 0x01
 134:	1b 82       	std	Y+3, r1	; 0x03
		uart0_hal_send_message((uint8_t*)msg, 3);
 136:	63 e0       	ldi	r22, 0x03	; 3
 138:	ce 01       	movw	r24, r28
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart0_hal_send_message>
 140:	1f c0       	rjmp	.+62     	; 0x180 <test_wake_up+0x6a>
		}else if(status==LM_STATUS_TRY_AGAIN){
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	71 f4       	brne	.+28     	; 0x162 <test_wake_up+0x4c>
		char msg[]="TRY";
 146:	84 e5       	ldi	r24, 0x54	; 84
 148:	92 e5       	ldi	r25, 0x52	; 82
 14a:	9a 83       	std	Y+2, r25	; 0x02
 14c:	89 83       	std	Y+1, r24	; 0x01
 14e:	89 e5       	ldi	r24, 0x59	; 89
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	9c 83       	std	Y+4, r25	; 0x04
 154:	8b 83       	std	Y+3, r24	; 0x03
		uart0_hal_send_message((uint8_t*)msg, 4);
 156:	64 e0       	ldi	r22, 0x04	; 4
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart0_hal_send_message>
 160:	0f c0       	rjmp	.+30     	; 0x180 <test_wake_up+0x6a>
		}else{
		char msg[]="FAIL";
 162:	2e e0       	ldi	r18, 0x0E	; 14
 164:	31 e0       	ldi	r19, 0x01	; 1
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	85 e0       	ldi	r24, 0x05	; 5
 16a:	f9 01       	movw	r30, r18
 16c:	de 01       	movw	r26, r28
 16e:	11 96       	adiw	r26, 0x01	; 1
 170:	74 2f       	mov	r23, r20
 172:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__movmemx_qi>
		uart0_hal_send_message((uint8_t*)msg, 5);
 176:	65 e0       	ldi	r22, 0x05	; 5
 178:	ce 01       	movw	r24, r28
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart0_hal_send_message>
	}
}
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

Disassembly of section .text.test_lora_module_start:

00000488 <test_lora_module_start>:
void test_wake_up();


void test_lora_module_start(){
	
	uart0_hal_init();
 488:	0e 94 c8 01 	call	0x390	; 0x390 <uart0_hal_init>
	rn2483_init();
 48c:	0e 94 6d 02 	call	0x4da	; 0x4da <rn2483_init>
	
	while(1){
		//test_join_network();
		//test_send_uplink();
		//test_put_to_sleep();
		test_wake_up();
 490:	0e 94 8b 00 	call	0x116	; 0x116 <test_wake_up>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 494:	2f ef       	ldi	r18, 0xFF	; 255
 496:	8d e3       	ldi	r24, 0x3D	; 61
 498:	99 e4       	ldi	r25, 0x49	; 73
 49a:	21 50       	subi	r18, 0x01	; 1
 49c:	80 40       	sbci	r24, 0x00	; 0
 49e:	90 40       	sbci	r25, 0x00	; 0
 4a0:	e1 f7       	brne	.-8      	; 0x49a <test_lora_module_start+0x12>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <test_lora_module_start+0x1c>
 4a4:	00 00       	nop
 4a6:	f4 cf       	rjmp	.-24     	; 0x490 <test_lora_module_start+0x8>

Disassembly of section .text.libgcc:

000004a8 <__movmemx_qi>:
 4a8:	99 27       	eor	r25, r25

000004aa <__movmemx_hi>:
 4aa:	77 fd       	sbrc	r23, 7
 4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <__movmemx_hi+0xe>
 4ae:	05 90       	lpm	r0, Z+
 4b0:	0d 92       	st	X+, r0
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__movmemx_hi+0x4>
 4b6:	08 95       	ret
 4b8:	01 90       	ld	r0, Z+
 4ba:	0d 92       	st	X+, r0
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <__movmemx_hi+0xe>
 4c0:	08 95       	ret

Disassembly of section .text.avrlibc:

0000034e <strcmp>:
 34e:	cf 92       	push	r12
 350:	df 92       	push	r13
 352:	ef 92       	push	r14
 354:	6b 01       	movw	r12, r22
 356:	e8 2e       	mov	r14, r24
 358:	f6 01       	movw	r30, r12
 35a:	84 91       	lpm	r24, Z
 35c:	e7 fc       	sbrc	r14, 7
 35e:	80 81       	ld	r24, Z
 360:	f9 01       	movw	r30, r18
 362:	54 91       	lpm	r21, Z
 364:	47 fd       	sbrc	r20, 7
 366:	50 81       	ld	r21, Z
 368:	85 13       	cpse	r24, r21
 36a:	0b c0       	rjmp	.+22     	; 0x382 <strcmp+0x34>
 36c:	88 23       	and	r24, r24
 36e:	41 f0       	breq	.+16     	; 0x380 <strcmp+0x32>
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	c8 1a       	sub	r12, r24
 374:	d8 0a       	sbc	r13, r24
 376:	e8 0a       	sbc	r14, r24
 378:	2f 5f       	subi	r18, 0xFF	; 255
 37a:	3f 4f       	sbci	r19, 0xFF	; 255
 37c:	4f 4f       	sbci	r20, 0xFF	; 255
 37e:	ec cf       	rjmp	.-40     	; 0x358 <strcmp+0xa>
 380:	58 2f       	mov	r21, r24
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	85 1b       	sub	r24, r21
 386:	91 09       	sbc	r25, r1
 388:	ef 90       	pop	r14
 38a:	df 90       	pop	r13
 38c:	cf 90       	pop	r12
 38e:	08 95       	ret
